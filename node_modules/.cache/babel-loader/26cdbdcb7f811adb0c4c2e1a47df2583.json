{"ast":null,"code":"import { Section as $cd96ac1a79e6f1d2$re_export$Section, useCollection as $85LnJ$useCollection } from \"@react-stately/collections\";\nimport { useGridState as $85LnJ$useGridState, GridCollection as $85LnJ$GridCollection } from \"@react-stately/grid\";\nimport $85LnJ$react, { useMemo as $85LnJ$useMemo } from \"react\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $494692f36da31136$exports = {};\n$parcel$export($494692f36da31136$exports, \"useTableState\", () => $494692f36da31136$export$907bcc6c48325fd6);\nconst $1ca231328db2f66a$var$ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);\n\nfunction $1ca231328db2f66a$var$buildHeaderRows(keyMap, columnNodes) {\n  let columns = [];\n  let seen = new Map();\n\n  for (let column of columnNodes) {\n    let parentKey = column.parentKey;\n    let col = [column];\n\n    while (parentKey) {\n      let parent = keyMap.get(parentKey); // If we've already seen this parent, than it is shared\n      // with a previous column. If the current column is taller\n      // than the previous column, than we need to shift the parent\n      // in the previous column so it's level with the current column.\n\n      if (seen.has(parent)) {\n        parent.colspan++;\n        let {\n          column: column,\n          index: index\n        } = seen.get(parent);\n        if (index > col.length) break;\n\n        for (let i = index; i < col.length; i++) column.splice(i, 0, null); // Adjust shifted indices\n\n\n        for (let i1 = col.length; i1 < column.length; i1++) if (column[i1] && seen.has(column[i1])) seen.get(column[i1]).index = i1;\n      } else {\n        parent.colspan = 1;\n        col.push(parent);\n        seen.set(parent, {\n          column: col,\n          index: col.length - 1\n        });\n      }\n\n      parentKey = parent.parentKey;\n    }\n\n    columns.push(col);\n    column.index = columns.length - 1;\n  }\n\n  let maxLength = Math.max(...columns.map(c => c.length));\n  let headerRows = Array(maxLength).fill(0).map(() => []); // Convert columns into rows.\n\n  let colIndex = 0;\n\n  for (let column1 of columns) {\n    let i = maxLength - 1;\n\n    for (let item of column1) {\n      if (item) {\n        // Fill the space up until the current column with a placeholder\n        let row = headerRows[i];\n        let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n\n        if (rowLength < colIndex) {\n          let placeholder = {\n            type: 'placeholder',\n            key: 'placeholder-' + item.key,\n            colspan: colIndex - rowLength,\n            index: rowLength,\n            value: null,\n            rendered: null,\n            level: i,\n            hasChildNodes: false,\n            childNodes: [],\n            textValue: null\n          };\n\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = placeholder.key;\n            placeholder.prevKey = row[row.length - 1].key;\n          }\n\n          row.push(placeholder);\n        }\n\n        if (row.length > 0) {\n          row[row.length - 1].nextKey = item.key;\n          item.prevKey = row[row.length - 1].key;\n        }\n\n        item.level = i;\n        item.index = colIndex;\n        row.push(item);\n      }\n\n      i--;\n    }\n\n    colIndex++;\n  } // Add placeholders at the end of each row that is shorter than the maximum\n\n\n  let i = 0;\n\n  for (let row1 of headerRows) {\n    let rowLength = row1.reduce((p, c) => p + c.colspan, 0);\n\n    if (rowLength < columnNodes.length) {\n      let placeholder = {\n        type: 'placeholder',\n        key: 'placeholder-' + row1[row1.length - 1].key,\n        colspan: columnNodes.length - rowLength,\n        index: rowLength,\n        value: null,\n        rendered: null,\n        level: i,\n        hasChildNodes: false,\n        childNodes: [],\n        textValue: null,\n        prevKey: row1[row1.length - 1].key\n      };\n      row1.push(placeholder);\n    }\n\n    i++;\n  }\n\n  return headerRows.map((childNodes, index) => {\n    let row = {\n      type: 'headerrow',\n      key: 'headerrow-' + index,\n      index: index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes: childNodes,\n      textValue: null\n    };\n    return row;\n  });\n}\n\nclass $1ca231328db2f66a$export$596e1b2e2cf93690 extends $85LnJ$GridCollection {\n  constructor(nodes, prev, opts) {\n    let rowHeaderColumnKeys = new Set();\n    let body;\n    let columns = []; // Add cell for selection checkboxes if needed.\n\n    if (opts?.showSelectionCheckboxes) {\n      let rowHeaderColumn = {\n        type: 'column',\n        key: $1ca231328db2f66a$var$ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n      columns.unshift(rowHeaderColumn);\n    }\n\n    let rows = [];\n    let columnKeyMap = new Map();\n\n    let visit = node => {\n      switch (node.type) {\n        case 'body':\n          body = node;\n          break;\n\n        case 'column':\n          columnKeyMap.set(node.key, node);\n\n          if (!node.hasChildNodes) {\n            columns.push(node);\n            if (node.props.isRowHeader) rowHeaderColumnKeys.add(node.key);\n          }\n\n          break;\n\n        case 'item':\n          rows.push(node);\n          return;\n        // do not go into childNodes\n      }\n\n      for (let child of node.childNodes) visit(child);\n    };\n\n    for (let node1 of nodes) visit(node1);\n\n    let headerRows = $1ca231328db2f66a$var$buildHeaderRows(columnKeyMap, columns);\n    headerRows.forEach((row, i) => rows.splice(i, 0, row));\n    super({\n      columnCount: columns.length,\n      items: rows,\n      visitNode: node => {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    this.columns = columns;\n    this.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    this.body = body;\n    this.headerRows = headerRows; // Default row header column to the first one.\n\n    if (this.rowHeaderColumnKeys.size === 0) this.rowHeaderColumnKeys.add(this.columns[opts?.showSelectionCheckboxes ? 1 : 0].key);\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.body.childNodes;\n  }\n\n  get size() {\n    return [...this.body.childNodes].length;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return [...this.body.childNodes][0]?.key;\n  }\n\n  getLastKey() {\n    let rows = [...this.body.childNodes];\n    return rows[rows.length - 1]?.key;\n  }\n\n  getItem(key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n\n}\n\nconst $494692f36da31136$var$OPPOSITE_SORT_DIRECTION = {\n  ascending: 'descending',\n  descending: 'ascending'\n};\n\nfunction $494692f36da31136$export$907bcc6c48325fd6(props) {\n  let {\n    selectionMode = 'none'\n  } = props;\n  let context = $85LnJ$useMemo(() => ({\n    showSelectionCheckboxes: props.showSelectionCheckboxes && selectionMode !== 'none',\n    selectionMode: selectionMode,\n    columns: []\n  }), [props.children, props.showSelectionCheckboxes, selectionMode]);\n  let collection = $85LnJ$useCollection(props, (nodes, prev) => new $1ca231328db2f66a$export$596e1b2e2cf93690(nodes, prev, context), context);\n  let {\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager\n  } = $85LnJ$useGridState({ ...props,\n    collection: collection\n  });\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n\n    sort(columnKey) {\n      props.onSortChange({\n        column: columnKey,\n        direction: props.sortDescriptor?.column === columnKey ? $494692f36da31136$var$OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction] : 'ascending'\n      });\n    }\n\n  };\n}\n\nvar $3657764c2db588d6$exports = {};\n$parcel$export($3657764c2db588d6$exports, \"TableHeader\", () => $3657764c2db588d6$export$f850895b287ef28e);\n\nfunction $3657764c2db588d6$var$TableHeader(props) {\n  return null;\n}\n\n$3657764c2db588d6$var$TableHeader.getCollectionNode = function* getCollectionNode(props) {\n  let {\n    children: children,\n    columns: columns\n  } = props;\n\n  if (typeof children === 'function') {\n    if (!columns) throw new Error('props.children was a function but props.columns is missing');\n\n    for (let column of columns) yield {\n      type: 'column',\n      value: column,\n      renderer: children\n    };\n  } else {\n    let columns = [];\n    $85LnJ$react.Children.forEach(children, column => {\n      columns.push({\n        type: 'column',\n        element: column\n      });\n    });\n    yield* columns;\n  }\n};\n/**\n * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `columns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\n\n\nlet $3657764c2db588d6$export$f850895b287ef28e = $3657764c2db588d6$var$TableHeader;\nvar $99858a7515d0e6da$exports = {};\n$parcel$export($99858a7515d0e6da$exports, \"TableBody\", () => $99858a7515d0e6da$export$76ccd210b9029917);\n\nfunction $99858a7515d0e6da$var$TableBody(props) {\n  return null;\n}\n\n$99858a7515d0e6da$var$TableBody.getCollectionNode = function* getCollectionNode(props) {\n  let {\n    children: children,\n    items: items1\n  } = props;\n  yield {\n    type: 'body',\n    hasChildNodes: true,\n    props: props,\n\n    *childNodes() {\n      if (typeof children === 'function') {\n        if (!items1) throw new Error('props.children was a function but props.items is missing');\n\n        for (let item of items1) yield {\n          type: 'item',\n          value: item,\n          renderer: children\n        };\n      } else {\n        let items = [];\n        $85LnJ$react.Children.forEach(children, item => {\n          items.push({\n            type: 'item',\n            element: item\n          });\n        });\n        yield* items;\n      }\n    }\n\n  };\n};\n/**\n * A TableBody is a container for the Row elements of a Table. Rows can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `items` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\n\n\nlet $99858a7515d0e6da$export$76ccd210b9029917 = $99858a7515d0e6da$var$TableBody;\nvar $687413af9bbb06c5$exports = {};\n$parcel$export($687413af9bbb06c5$exports, \"Column\", () => $687413af9bbb06c5$export$816b5d811295e6bc);\n\nfunction $687413af9bbb06c5$var$Column(props) {\n  return null;\n}\n\n$687413af9bbb06c5$var$Column.getCollectionNode = function* getCollectionNode(props, context1) {\n  let {\n    title: title,\n    children: children,\n    childColumns: childColumns1\n  } = props;\n  let rendered = title || children;\n  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];\n  let fullNodes = yield {\n    type: 'column',\n    hasChildNodes: !!childColumns1 || title && $85LnJ$react.Children.count(children) > 0,\n    rendered: rendered,\n    textValue: textValue,\n    props: props,\n\n    *childNodes() {\n      if (childColumns1) for (let child1 of childColumns1) yield {\n        type: 'column',\n        value: child1\n      };else if (title) {\n        let childColumns = [];\n        $85LnJ$react.Children.forEach(children, child => {\n          childColumns.push({\n            type: 'column',\n            element: child\n          });\n        });\n        yield* childColumns;\n      }\n    },\n\n    shouldInvalidate(newContext) {\n      // This is a bit of a hack, but it works.\n      // If this method is called, then there's a cached version of this node available.\n      // But, we need to keep the list of columns in the new context up to date.\n      updateContext(newContext);\n      return false;\n    }\n\n  };\n\n  let updateContext = context => {\n    // register leaf columns on the context so that <Row> can access them\n    for (let node of fullNodes) if (!node.hasChildNodes) context.columns.push(node);\n  };\n\n  updateContext(context1);\n};\n/**\n * A Column represents a field of each item within a Table. Columns may also contain nested\n * Column elements to represent column groups. Nested columns can be statically defined as\n * children, or dynamically generated using a function based on the `childColumns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\n\n\nlet $687413af9bbb06c5$export$816b5d811295e6bc = $687413af9bbb06c5$var$Column;\nvar $f711e0e1fe2dac16$exports = {};\n$parcel$export($f711e0e1fe2dac16$exports, \"Row\", () => $f711e0e1fe2dac16$export$b59bdbef9ce70de2);\n\nfunction $f711e0e1fe2dac16$var$Row(props) {\n  return null;\n}\n\n$f711e0e1fe2dac16$var$Row.getCollectionNode = function* getCollectionNode(props, context) {\n  let {\n    children: children,\n    textValue: textValue\n  } = props;\n  yield {\n    type: 'item',\n    props: props,\n    textValue: textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: true,\n\n    *childNodes() {\n      // Process cells first\n      if (context.showSelectionCheckboxes && context.selectionMode !== 'none') yield {\n        type: 'cell',\n        key: 'header',\n        props: {\n          isSelectionCell: true\n        }\n      };\n      if (typeof children === 'function') for (let column of context.columns) yield {\n        type: 'cell',\n        element: children(column.key),\n        key: column.key // this is combined with the row key by CollectionBuilder\n\n      };else {\n        let cells = [];\n        $85LnJ$react.Children.forEach(children, cell => {\n          cells.push({\n            type: 'cell',\n            element: cell\n          });\n        });\n        if (cells.length !== context.columns.length) throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);\n        yield* cells;\n      }\n    },\n\n    shouldInvalidate(newContext) {\n      // Invalidate all rows if the columns changed.\n      return newContext.columns.length !== context.columns.length || newContext.columns.some((c, i) => c.key !== context.columns[i].key) || newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes || newContext.selectionMode !== context.selectionMode;\n    }\n\n  };\n};\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */\n// We don't want getCollectionNode to show up in the type definition\n\n\nlet $f711e0e1fe2dac16$export$b59bdbef9ce70de2 = $f711e0e1fe2dac16$var$Row;\nvar $7926cbd9620c5dcc$exports = {};\n$parcel$export($7926cbd9620c5dcc$exports, \"Cell\", () => $7926cbd9620c5dcc$export$f6f0c3fe4ec306ea);\n\nfunction $7926cbd9620c5dcc$var$Cell(props) {\n  return null;\n}\n\n$7926cbd9620c5dcc$var$Cell.getCollectionNode = function* getCollectionNode(props) {\n  let {\n    children: children\n  } = props;\n  let textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';\n  yield {\n    type: 'cell',\n    props: props,\n    rendered: children,\n    textValue: textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: false\n  };\n};\n/**\n * A Cell represents the value of a single Column within a Table Row.\n */\n// We don't want getCollectionNode to show up in the type definition\n\n\nlet $7926cbd9620c5dcc$export$f6f0c3fe4ec306ea = $7926cbd9620c5dcc$var$Cell;\nexport { $cd96ac1a79e6f1d2$re_export$Section as Section, $494692f36da31136$export$907bcc6c48325fd6 as useTableState, $3657764c2db588d6$export$f850895b287ef28e as TableHeader, $99858a7515d0e6da$export$76ccd210b9029917 as TableBody, $687413af9bbb06c5$export$816b5d811295e6bc as Column, $f711e0e1fe2dac16$export$b59bdbef9ce70de2 as Row, $7926cbd9620c5dcc$export$f6f0c3fe4ec306ea as Cell };","map":{"version":3,"mappings":"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","names":["$1ca231328db2f66a$var$ROW_HEADER_COLUMN_KEY","Math","random","toString","slice","$1ca231328db2f66a$var$buildHeaderRows","keyMap","columnNodes","columns","seen","Map","column","parentKey","col","parent","get","has","colspan","index","length","i","splice","i1","push","set","maxLength","max","map","c","headerRows","Array","fill","colIndex","column1","item","row","rowLength","reduce","p","placeholder","type","key","value","rendered","level","hasChildNodes","childNodes","textValue","nextKey","prevKey","row1","$1ca231328db2f66a$export$596e1b2e2cf93690","$85LnJ$GridCollection","nodes","prev","opts","rowHeaderColumnKeys","Set","body","showSelectionCheckboxes","rowHeaderColumn","props","isSelectionCell","unshift","rows","columnKeyMap","visit","node","isRowHeader","add","child","node1","forEach","columnCount","items","visitNode","size","Symbol","iterator","getKeys","keys","getKeyBefore","getKeyAfter","getFirstKey","getLastKey","getItem","at","idx","$494692f36da31136$var$OPPOSITE_SORT_DIRECTION","ascending","descending","$494692f36da31136$export$907bcc6c48325fd6","selectionMode","context","$85LnJ$useMemo","children","collection","$85LnJ$useCollection","disabledKeys","selectionManager","$85LnJ$useGridState","sortDescriptor","sort","columnKey","onSortChange","direction","$3657764c2db588d6$var$TableHeader","getCollectionNode","Error","renderer","$85LnJ$react","Children","element","$3657764c2db588d6$export$f850895b287ef28e","$99858a7515d0e6da$var$TableBody","items1","$99858a7515d0e6da$export$76ccd210b9029917","$687413af9bbb06c5$var$Column","context1","title","childColumns","childColumns1","fullNodes","count","child1","shouldInvalidate","newContext","updateContext","$687413af9bbb06c5$export$816b5d811295e6bc","$f711e0e1fe2dac16$var$Row","cells","cell","some","$f711e0e1fe2dac16$export$b59bdbef9ce70de2","$7926cbd9620c5dcc$var$Cell","$7926cbd9620c5dcc$export$f6f0c3fe4ec306ea"],"sources":["C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\TableCollection.ts","C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\useTableState.ts","C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\TableHeader.ts","C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\TableBody.ts","C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\Column.ts","C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\Row.ts","C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\Cell.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {GridCollection} from '@react-stately/grid';\nimport {GridNode} from '@react-types/grid';\nimport {Key} from 'react';\n\ninterface GridCollectionOptions {\n  showSelectionCheckboxes?: boolean\n}\n\nconst ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);\n\nfunction buildHeaderRows<T>(keyMap: Map<Key, GridNode<T>>, columnNodes: GridNode<T>[]): GridNode<T>[] {\n  let columns = [];\n  let seen = new Map();\n  for (let column of columnNodes) {\n    let parentKey = column.parentKey;\n    let col = [column];\n\n    while (parentKey) {\n      let parent: GridNode<T> = keyMap.get(parentKey);\n\n      // If we've already seen this parent, than it is shared\n      // with a previous column. If the current column is taller\n      // than the previous column, than we need to shift the parent\n      // in the previous column so it's level with the current column.\n      if (seen.has(parent)) {\n        parent.colspan++;\n\n        let {column, index} = seen.get(parent);\n        if (index > col.length) {\n          break;\n        }\n\n        for (let i = index; i < col.length; i++) {\n          column.splice(i, 0, null);\n        }\n\n        // Adjust shifted indices\n        for (let i = col.length; i < column.length; i++) {\n          if (column[i] && seen.has(column[i])) {\n            seen.get(column[i]).index = i;\n          }\n        }\n      } else {\n        parent.colspan = 1;\n        col.push(parent);\n        seen.set(parent, {column: col, index: col.length - 1});\n      }\n\n      parentKey = parent.parentKey;\n    }\n\n    columns.push(col);\n    column.index = columns.length - 1;\n  }\n\n  let maxLength = Math.max(...columns.map(c => c.length));\n  let headerRows = Array(maxLength).fill(0).map(() => []);\n\n  // Convert columns into rows.\n  let colIndex = 0;\n  for (let column of columns) {\n    let i = maxLength - 1;\n    for (let item of column) {\n      if (item) {\n        // Fill the space up until the current column with a placeholder\n        let row = headerRows[i];\n        let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n        if (rowLength < colIndex) {\n          let placeholder: GridNode<T> = {\n            type: 'placeholder',\n            key: 'placeholder-' + item.key,\n            colspan: colIndex - rowLength,\n            index: rowLength,\n            value: null,\n            rendered: null,\n            level: i,\n            hasChildNodes: false,\n            childNodes: [],\n            textValue: null\n          };\n\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = placeholder.key;\n            placeholder.prevKey = row[row.length - 1].key;\n          }\n\n          row.push(placeholder);\n        }\n\n        if (row.length > 0) {\n          row[row.length - 1].nextKey = item.key;\n          item.prevKey = row[row.length - 1].key;\n        }\n\n        item.level = i;\n        item.index = colIndex;\n        row.push(item);\n      }\n\n      i--;\n    }\n\n    colIndex++;\n  }\n\n  // Add placeholders at the end of each row that is shorter than the maximum\n  let i = 0;\n  for (let row of headerRows) {\n    let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n    if (rowLength < columnNodes.length) {\n      let placeholder: GridNode<T> = {\n        type: 'placeholder',\n        key: 'placeholder-' + row[row.length - 1].key,\n        colspan: columnNodes.length - rowLength,\n        index: rowLength,\n        value: null,\n        rendered: null,\n        level: i,\n        hasChildNodes: false,\n        childNodes: [],\n        textValue: null,\n        prevKey: row[row.length - 1].key\n      };\n\n      row.push(placeholder);\n    }\n\n    i++;\n  }\n\n  return headerRows.map((childNodes, index) => {\n    let row: GridNode<T> = {\n      type: 'headerrow',\n      key: 'headerrow-' + index,\n      index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes,\n      textValue: null\n    };\n\n    return row;\n  });\n}\n\nexport class TableCollection<T> extends GridCollection<T> {\n  headerRows: GridNode<T>[];\n  columns: GridNode<T>[];\n  rowHeaderColumnKeys: Set<Key>;\n  body: GridNode<T>;\n\n  constructor(nodes: Iterable<GridNode<T>>, prev?: TableCollection<T>, opts?: GridCollectionOptions) {\n    let rowHeaderColumnKeys: Set<Key> = new Set();\n    let body: GridNode<T>;\n    let columns = [];\n\n    // Add cell for selection checkboxes if needed.\n    if (opts?.showSelectionCheckboxes) {\n      let rowHeaderColumn: GridNode<T> = {\n        type: 'column',\n        key: ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n\n      columns.unshift(rowHeaderColumn);\n    }\n\n    let rows = [];\n    let columnKeyMap = new Map();\n    let visit = (node: GridNode<T>) => {\n      switch (node.type) {\n        case 'body':\n          body = node;\n          break;\n        case 'column':\n          columnKeyMap.set(node.key, node);\n          if (!node.hasChildNodes) {\n            columns.push(node);\n\n            if (node.props.isRowHeader) {\n              rowHeaderColumnKeys.add(node.key);\n            }\n          }\n          break;\n        case 'item':\n          rows.push(node);\n          return; // do not go into childNodes\n      }\n      for (let child of node.childNodes) {\n        visit(child);\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n    let headerRows = buildHeaderRows(columnKeyMap, columns) as GridNode<T>[];\n    headerRows.forEach((row, i) => rows.splice(i, 0, row));\n\n    super({\n      columnCount: columns.length,\n      items: rows,\n      visitNode: node => {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    this.columns = columns;\n    this.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    this.body = body;\n    this.headerRows = headerRows;\n\n    // Default row header column to the first one.\n    if (this.rowHeaderColumnKeys.size === 0) {\n      this.rowHeaderColumnKeys.add(this.columns[opts?.showSelectionCheckboxes ? 1 : 0].key);\n    }\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.body.childNodes;\n  }\n\n  get size() {\n    return [...this.body.childNodes].length;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return [...this.body.childNodes][0]?.key;\n  }\n\n  getLastKey() {\n    let rows = [...this.body.childNodes];\n    return rows[rows.length - 1]?.key;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBase, Node, SelectionMode, Sortable, SortDescriptor, SortDirection} from '@react-types/shared';\nimport {GridState, useGridState} from '@react-stately/grid';\nimport {TableCollection as ITableCollection} from '@react-types/table';\nimport {Key, useMemo} from 'react';\nimport {MultipleSelectionStateProps} from '@react-stately/selection';\nimport {TableCollection} from './TableCollection';\nimport {useCollection} from '@react-stately/collections';\n\nexport interface TableState<T> extends GridState<T, ITableCollection<T>> {\n  /** A collection of rows and columns in the table. */\n  collection: ITableCollection<T>,\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes: boolean,\n  /** The current sorted column and direction. */\n  sortDescriptor: SortDescriptor,\n  /** Calls the provided onSortChange handler with the provided column key and sort direction. */\n  sort(columnKey: Key): void\n}\n\nexport interface CollectionBuilderContext<T> {\n  showSelectionCheckboxes: boolean,\n  selectionMode: SelectionMode,\n  columns: Node<T>[]\n}\n\nexport interface TableStateProps<T> extends CollectionBase<T>, MultipleSelectionStateProps, Sortable {\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes?: boolean\n}\n\nconst OPPOSITE_SORT_DIRECTION = {\n  ascending: 'descending' as SortDirection,\n  descending: 'ascending' as SortDirection\n};\n\n/**\n * Provides state management for a table component. Handles building a collection\n * of columns and rows from props. In addition, it tracks row selection and manages sort order changes.\n */\nexport function useTableState<T extends object>(props: TableStateProps<T>): TableState<T>  {\n  let {selectionMode = 'none'} = props;\n\n  let context = useMemo(() => ({\n    showSelectionCheckboxes: props.showSelectionCheckboxes && selectionMode !== 'none',\n    selectionMode,\n    columns: []\n  }), [props.children, props.showSelectionCheckboxes, selectionMode]);\n\n  let collection = useCollection<T, TableCollection<T>>(\n    props,\n    (nodes, prev) => new TableCollection(nodes, prev, context),\n    context\n  );\n  let {disabledKeys, selectionManager} = useGridState({...props, collection});\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n    sort(columnKey: Key) {\n      props.onSortChange({\n        column: columnKey,\n        direction: props.sortDescriptor?.column === columnKey\n          ? OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction]\n          : 'ascending'\n      });\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {TableHeaderProps} from '@react-types/table';\n\nfunction TableHeader<T>(props: TableHeaderProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableHeader.getCollectionNode = function* getCollectionNode<T>(props: TableHeaderProps<T>): Generator<PartialNode<T>, void, any> {\n  let {children, columns} = props;\n  if (typeof children === 'function') {\n    if (!columns) {\n      throw new Error('props.children was a function but props.columns is missing');\n    }\n\n    for (let column of columns) {\n      yield {\n        type: 'column',\n        value: column,\n        renderer: children\n      };\n    }\n  } else {\n    let columns: PartialNode<T>[] = [];\n    React.Children.forEach(children, column => {\n      columns.push({\n        type: 'column',\n        element: column\n      });\n    });\n\n    yield* columns;\n  }\n};\n\n/**\n * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `columns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableHeader = TableHeader as <T>(props: TableHeaderProps<T>) => JSX.Element;\nexport {_TableHeader as TableHeader};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {TableBodyProps} from '@react-types/table';\n\nfunction TableBody<T>(props: TableBodyProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableBody.getCollectionNode = function* getCollectionNode<T>(props: TableBodyProps<T>): Generator<PartialNode<T>> {\n  let {children, items} = props;\n  yield {\n    type: 'body',\n    hasChildNodes: true,\n    props,\n    *childNodes() {\n      if (typeof children === 'function') {\n        if (!items) {\n          throw new Error('props.children was a function but props.items is missing');\n        }\n\n        for (let item of items) {\n          yield {\n            type: 'item',\n            value: item,\n            renderer: children\n          };\n        }\n      } else {\n        let items: PartialNode<T>[] = [];\n        React.Children.forEach(children, item => {\n          items.push({\n            type: 'item',\n            element: item\n          });\n        });\n\n        yield* items;\n      }\n    }\n  };\n};\n\n/**\n * A TableBody is a container for the Row elements of a Table. Rows can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `items` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableBody = TableBody as <T>(props: TableBodyProps<T>) => JSX.Element;\nexport {_TableBody as TableBody};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {ColumnProps} from '@react-types/table';\nimport {GridNode} from '@react-types/grid';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\n\nfunction Column<T>(props: ColumnProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nColumn.getCollectionNode = function* getCollectionNode<T>(props: ColumnProps<T>, context: CollectionBuilderContext<T>): Generator<PartialNode<T>, void, GridNode<T>[]> {\n  let {title, children, childColumns} = props;\n\n  let rendered = title || children;\n  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];\n\n  let fullNodes = yield {\n    type: 'column',\n    hasChildNodes: !!childColumns || (title && React.Children.count(children) > 0),\n    rendered,\n    textValue,\n    props,\n    *childNodes() {\n      if (childColumns) {\n        for (let child of childColumns) {\n          yield {\n            type: 'column',\n            value: child\n          };\n        }\n      } else if (title) {\n        let childColumns: PartialNode<T>[] = [];\n        React.Children.forEach(children, child => {\n          childColumns.push({\n            type: 'column',\n            element: child as ReactElement<ColumnProps<T>>\n          });\n        });\n\n        yield* childColumns;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // This is a bit of a hack, but it works.\n      // If this method is called, then there's a cached version of this node available.\n      // But, we need to keep the list of columns in the new context up to date.\n      updateContext(newContext);\n      return false;\n    }\n  };\n\n  let updateContext = (context: CollectionBuilderContext<T>) => {\n    // register leaf columns on the context so that <Row> can access them\n    for (let node of fullNodes) {\n      if (!node.hasChildNodes) {\n        context.columns.push(node);\n      }\n    }\n  };\n\n  updateContext(context);\n};\n\n/**\n * A Column represents a field of each item within a Table. Columns may also contain nested\n * Column elements to represent column groups. Nested columns can be statically defined as\n * children, or dynamically generated using a function based on the `childColumns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Column = Column as <T>(props: ColumnProps<T>) => JSX.Element;\nexport {_Column as Column};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {RowProps} from '@react-types/table';\n\nfunction Row(props: RowProps): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nRow.getCollectionNode = function* getCollectionNode<T>(props: RowProps, context: CollectionBuilderContext<T>): Generator<PartialNode<T>> {\n  let {children, textValue} = props;\n\n  yield {\n    type: 'item',\n    props: props,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: true,\n    *childNodes() {\n      // Process cells first\n      if (context.showSelectionCheckboxes && context.selectionMode !== 'none') {\n        yield {\n          type: 'cell',\n          key: 'header', // this is combined with the row key by CollectionBuilder\n          props: {\n            isSelectionCell: true\n          }\n        };\n      }\n\n      if (typeof children === 'function') {\n        for (let column of context.columns) {\n          yield {\n            type: 'cell',\n            element: children(column.key),\n            key: column.key // this is combined with the row key by CollectionBuilder\n          };\n        }\n      } else {\n        let cells: PartialNode<T>[] = [];\n        React.Children.forEach(children, cell => {\n          cells.push({\n            type: 'cell',\n            element: cell\n          });\n        });\n\n        if (cells.length !== context.columns.length) {\n          throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);\n        }\n\n        yield* cells;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // Invalidate all rows if the columns changed.\n      return newContext.columns.length !== context.columns.length ||\n        newContext.columns.some((c, i) => c.key !== context.columns[i].key) ||\n        newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes ||\n        newContext.selectionMode !== context.selectionMode;\n    }\n  };\n};\n\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Row = Row as (props: RowProps) => JSX.Element;\nexport {_Row as Row};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CellProps} from '@react-types/table';\nimport {PartialNode} from '@react-stately/collections';\nimport {ReactElement} from 'react';\n\nfunction Cell(props: CellProps): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nCell.getCollectionNode = function* getCollectionNode<T>(props: CellProps): Generator<PartialNode<T>> {\n  let {children} = props;\n\n  let textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';\n  yield {\n    type: 'cell',\n    props: props,\n    rendered: children,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: false\n  };\n};\n\n/**\n * A Cell represents the value of a single Column within a Table Row.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Cell = Cell as (props: CellProps) => JSX.Element;\nexport {_Cell as Cell};\n"]},"metadata":{},"sourceType":"module"}