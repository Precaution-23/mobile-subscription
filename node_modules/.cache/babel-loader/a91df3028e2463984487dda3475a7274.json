{"ast":null,"code":"import { mergeProps as $bx7SL$mergeProps, useSyncRef as $bx7SL$useSyncRef, useGlobalListeners as $bx7SL$useGlobalListeners, focusWithoutScrolling as $bx7SL$focusWithoutScrolling, isIOS as $bx7SL$isIOS, runAfterTransition as $bx7SL$runAfterTransition, useLayoutEffect as $bx7SL$useLayoutEffect, isMac as $bx7SL$isMac, useEvent as $bx7SL$useEvent, useDescription as $bx7SL$useDescription } from \"@react-aria/utils\";\nimport $bx7SL$react, { useRef as $bx7SL$useRef, useContext as $bx7SL$useContext, useState as $bx7SL$useState, useMemo as $bx7SL$useMemo, useEffect as $bx7SL$useEffect, useCallback as $bx7SL$useCallback } from \"react\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $3b117e43dc0ca95d$exports = {};\n$parcel$export($3b117e43dc0ca95d$exports, \"Pressable\", () => $3b117e43dc0ca95d$export$27c701ed9e449e99);\nvar $f6c31cce2adf654f$exports = {};\n$parcel$export($f6c31cce2adf654f$exports, \"usePress\", () => $f6c31cce2adf654f$export$45712eceda6fad21); // Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\n\nlet $14c0b72509d70225$var$state = 'default';\nlet $14c0b72509d70225$var$savedUserSelect = '';\nlet $14c0b72509d70225$var$modifiedElementMap = new WeakMap();\n\nfunction $14c0b72509d70225$export$16a4697467175487(target) {\n  if ($bx7SL$isIOS()) {\n    if ($14c0b72509d70225$var$state === 'default') {\n      $14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = 'none';\n    }\n\n    $14c0b72509d70225$var$state = 'disabled';\n  } else if (target) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    $14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = 'none';\n  }\n}\n\nfunction $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {\n  if ($bx7SL$isIOS()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if ($14c0b72509d70225$var$state !== 'disabled') return;\n    $14c0b72509d70225$var$state = 'restoring'; // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      $bx7SL$runAfterTransition(() => {\n        // Avoid race conditions\n        if ($14c0b72509d70225$var$state === 'restoring') {\n          if (document.documentElement.style.webkitUserSelect === 'none') document.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || '';\n          $14c0b72509d70225$var$savedUserSelect = '';\n          $14c0b72509d70225$var$state = 'default';\n        }\n      });\n    }, 300);\n  } else // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {\n      let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);\n      if (target.style.userSelect === 'none') target.style.userSelect = targetOldUserSelect;\n      if (target.getAttribute('style') === '') target.removeAttribute('style');\n      $14c0b72509d70225$var$modifiedElementMap.delete(target);\n    }\n}\n\nfunction $8a9cb279dc87e130$export$60278871457622de(event) {\n  // JAWS/NVDA with Firefox.\n  if (event.mozInputSource === 0 && event.isTrusted) return true;\n  return event.detail === 0 && !event.pointerType;\n}\n\nclass $8a9cb279dc87e130$export$905e7fc544a71f36 {\n  isDefaultPrevented() {\n    return this.nativeEvent.defaultPrevented;\n  }\n\n  preventDefault() {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n\n  stopPropagation() {\n    this.nativeEvent.stopPropagation();\n\n    this.isPropagationStopped = () => true;\n  }\n\n  isPropagationStopped() {\n    return false;\n  }\n\n  persist() {}\n\n  constructor(type, nativeEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target;\n    this.currentTarget = nativeEvent.currentTarget;\n    this.relatedTarget = nativeEvent.relatedTarget;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n\n}\n\nfunction $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {\n  let stateRef = $bx7SL$useRef({\n    isFocused: false,\n    onBlur: onBlur,\n    observer: null\n  });\n  let state1 = stateRef.current;\n  state1.onBlur = onBlur; // Clean up MutationObserver on unmount. See below.\n  // eslint-disable-next-line arrow-body-style\n\n  $bx7SL$useLayoutEffect(() => {\n    return () => {\n      if (state1.observer) {\n        state1.observer.disconnect();\n        state1.observer = null;\n      }\n    };\n  }, [state1]); // This function is called during a React onFocus event.\n\n  return e1 => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (e1.target instanceof HTMLButtonElement || e1.target instanceof HTMLInputElement || e1.target instanceof HTMLTextAreaElement || e1.target instanceof HTMLSelectElement) {\n      state1.isFocused = true;\n      let target = e1.target;\n\n      let onBlurHandler = e => {\n        var // For backward compatibility, dispatch a (fake) React synthetic event.\n        ref;\n        let state = stateRef.current;\n        state.isFocused = false;\n        if (target.disabled) (ref = state.onBlur) === null || ref === void 0 ? void 0 : ref.call(state, new $8a9cb279dc87e130$export$905e7fc544a71f36('blur', e)); // We no longer need the MutationObserver once the target is blurred.\n\n        if (state.observer) {\n          state.observer.disconnect();\n          state.observer = null;\n        }\n      };\n\n      target.addEventListener('focusout', onBlurHandler, {\n        once: true\n      });\n      state1.observer = new MutationObserver(() => {\n        if (state1.isFocused && target.disabled) {\n          state1.observer.disconnect();\n          target.dispatchEvent(new FocusEvent('blur'));\n          target.dispatchEvent(new FocusEvent('focusout', {\n            bubbles: true\n          }));\n        }\n      });\n      state1.observer.observe(target, {\n        attributes: true,\n        attributeFilter: ['disabled']\n      });\n    }\n  };\n}\n\nconst $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = $bx7SL$react.createContext(null);\n$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = 'PressResponderContext';\n\nfunction $f6c31cce2adf654f$var$usePressResponderContext(props) {\n  // Consume context from <PressResponder> and merge with props.\n  let context = $bx7SL$useContext($ae1eeba8b9eafd08$export$5165eccb35aaadb5);\n\n  if (context) {\n    let {\n      register: register,\n      ...contextProps\n    } = context;\n    props = $bx7SL$mergeProps(contextProps, props);\n    register();\n  }\n\n  $bx7SL$useSyncRef(context, props.ref);\n  return props;\n}\n\nfunction $f6c31cce2adf654f$export$45712eceda6fad21(props) {\n  let {\n    onPress: onPress1,\n    onPressChange: onPressChange1,\n    onPressStart: onPressStart1,\n    onPressEnd: onPressEnd1,\n    onPressUp: onPressUp1,\n    isDisabled: isDisabled1,\n    isPressed: isPressedProp,\n    preventFocusOnPress: preventFocusOnPress,\n    shouldCancelOnPointerExit: shouldCancelOnPointerExit,\n    allowTextSelectionOnPress: allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _,\n    ...domProps\n  } = $f6c31cce2adf654f$var$usePressResponderContext(props);\n  let propsRef = $bx7SL$useRef(null);\n  propsRef.current = {\n    onPress: onPress1,\n    onPressChange: onPressChange1,\n    onPressStart: onPressStart1,\n    onPressEnd: onPressEnd1,\n    onPressUp: onPressUp1,\n    isDisabled: isDisabled1,\n    shouldCancelOnPointerExit: shouldCancelOnPointerExit\n  };\n  let [isPressed, setPressed] = $bx7SL$useState(false);\n  let ref = $bx7SL$useRef({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeAllGlobalListeners: removeAllGlobalListeners\n  } = $bx7SL$useGlobalListeners();\n  let pressProps1 = $bx7SL$useMemo(() => {\n    let state = ref.current;\n\n    let triggerPressStart = (originalEvent, pointerType) => {\n      let {\n        onPressStart: onPressStart,\n        onPressChange: onPressChange,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (isDisabled || state.didFirePressStart) return;\n      if (onPressStart) onPressStart({\n        type: 'pressstart',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n      if (onPressChange) onPressChange(true);\n      state.didFirePressStart = true;\n      setPressed(true);\n    };\n\n    let triggerPressEnd = function (originalEvent, pointerType) {\n      let wasPressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      let {\n        onPressEnd: onPressEnd,\n        onPressChange: onPressChange,\n        onPress: onPress,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (!state.didFirePressStart) return;\n      state.ignoreClickAfterPress = true;\n      state.didFirePressStart = false;\n      if (onPressEnd) onPressEnd({\n        type: 'pressend',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n      if (onPressChange) onPressChange(false);\n      setPressed(false);\n      if (onPress && wasPressed && !isDisabled) onPress({\n        type: 'press',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    let triggerPressUp = (originalEvent, pointerType) => {\n      let {\n        onPressUp: onPressUp,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (isDisabled) return;\n      if (onPressUp) onPressUp({\n        type: 'pressup',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    let cancel = e => {\n      if (state.isPressed) {\n        if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isPressed = false;\n        state.isOverTarget = false;\n        state.activePointerId = null;\n        state.pointerType = null;\n        removeAllGlobalListeners();\n        if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n      }\n    };\n\n    let pressProps = {\n      onKeyDown(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent) && e.currentTarget.contains(e.target)) {\n          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target)) e.preventDefault();\n          e.stopPropagation(); // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            triggerPressStart(e, 'keyboard'); // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n\n            addGlobalListener(document, 'keyup', onKeyUp, false);\n          }\n        }\n      },\n\n      onKeyUp(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard');\n      },\n\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target)) return;\n\n        if (e && e.button === 0) {\n          e.stopPropagation();\n          if (isDisabled1) e.preventDefault(); // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || $8a9cb279dc87e130$export$60278871457622de(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n            triggerPressStart(e, 'virtual');\n            triggerPressUp(e, 'virtual');\n            triggerPressEnd(e, 'virtual');\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n\n    };\n\n    let onKeyUp = e => {\n      if (state.isPressed && $f6c31cce2adf654f$var$isValidKeyboardEvent(e)) {\n        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target)) e.preventDefault();\n        e.stopPropagation();\n        state.isPressed = false;\n        let target = e.target;\n        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners(); // If the target is a link, trigger the click method to open the URL,\n        // but defer triggering pressEnd until onClick event handler.\n\n        if (state.target.contains(target) && $f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link') state.target.click();\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = e => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return; // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n\n        if ($f6c31cce2adf654f$var$isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        } // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n\n\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        state.pointerType = e.pointerType;\n        e.stopPropagation();\n\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n          if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n          if (!allowTextSelectionOnPress) $14c0b72509d70225$export$16a4697467175487(state.target);\n          triggerPressStart(e, state.pointerType);\n          addGlobalListener(document, 'pointermove', onPointerMove, false);\n          addGlobalListener(document, 'pointerup', onPointerUp, false);\n          addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n        }\n      };\n\n      pressProps.onMouseDown = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onPointerUp = e => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target) || state.pointerType === 'virtual') return; // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n\n        if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);\n      }; // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n\n\n      let onPointerMove = e => {\n        if (e.pointerId !== state.activePointerId) return;\n\n        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n\n      let onPointerUp = e => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n        }\n      };\n\n      let onPointerCancel = e => {\n        cancel(e);\n      };\n\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return; // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = e => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return; // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        e.stopPropagation();\n        if (state.ignoreEmulatedMouseEvents) return;\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = $8a9cb279dc87e130$export$60278871457622de(e.nativeEvent) ? 'virtual' : 'mouse';\n        if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n        triggerPressStart(e, state.pointerType);\n        addGlobalListener(document, 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, state.pointerType);\n        }\n      };\n\n      pressProps.onMouseLeave = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n\n      pressProps.onMouseUp = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType);\n      };\n\n      let onMouseUp = e => {\n        // Only handle left clicks\n        if (e.button !== 0) return;\n        state.isPressed = false;\n        removeAllGlobalListeners();\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);\n        if (!touch) return;\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch'; // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n\n        if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n        if (!allowTextSelectionOnPress) $14c0b72509d70225$export$16a4697467175487(state.target);\n        triggerPressStart(e, state.pointerType);\n        addGlobalListener(window, 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (!state.isPressed) return;\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n\n      pressProps.onTouchEnd = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (!state.isPressed) return;\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) triggerPressEnd(e, state.pointerType, false);\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n        removeAllGlobalListeners();\n      };\n\n      pressProps.onTouchCancel = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed) cancel(e);\n      };\n\n      let onScroll = e => {\n        if (state.isPressed && e.target.contains(state.target)) cancel({\n          currentTarget: state.target,\n          shiftKey: false,\n          ctrlKey: false,\n          metaKey: false,\n          altKey: false\n        });\n      };\n\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        cancel(e);\n      };\n    }\n\n    return pressProps;\n  }, [addGlobalListener, isDisabled1, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]); // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n\n  $bx7SL$useEffect(() => {\n    return () => {\n      if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(ref.current.target);\n    };\n  }, [allowTextSelectionOnPress]);\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: $bx7SL$mergeProps(domProps, pressProps1)\n  };\n}\n\nfunction $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction $f6c31cce2adf654f$var$isValidKeyboardEvent(event) {\n  const {\n    key: key,\n    code: code,\n    target: target\n  } = event;\n  const element = target;\n  const {\n    tagName: tagName,\n    isContentEditable: isContentEditable\n  } = element;\n  const role = element.getAttribute('role'); // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n\n  return (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') && tagName !== 'INPUT' && tagName !== 'TEXTAREA' && isContentEditable !== true && (!$f6c31cce2adf654f$var$isHTMLAnchorLink(element) || role === 'button' && key !== 'Enter') && // An element with role='link' should only trigger with Enter key\n  !(role === 'link' && key !== 'Enter');\n}\n\nfunction $f6c31cce2adf654f$var$getTouchFromEvent(event) {\n  const {\n    targetTouches: targetTouches\n  } = event;\n  if (targetTouches.length > 0) return targetTouches[0];\n  return null;\n}\n\nfunction $f6c31cce2adf654f$var$getTouchById(event, pointerId) {\n  const changedTouches = event.changedTouches;\n\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) return touch;\n  }\n\n  return null;\n}\n\nfunction $f6c31cce2adf654f$var$createEvent(target, e) {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\n\nfunction $f6c31cce2adf654f$var$getPointClientRect(point) {\n  let offsetX = point.width / 2 || point.radiusX || 0;\n  let offsetY = point.height / 2 || point.radiusY || 0;\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\n\nfunction $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) return false; // check if they cannot overlap on y axis\n\n  if (a.top > b.bottom || b.top > a.bottom) return false;\n  return true;\n}\n\nfunction $f6c31cce2adf654f$var$isOverTarget(point, target) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);\n  return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);\n}\n\nfunction $f6c31cce2adf654f$var$shouldPreventDefault(target) {\n  // We cannot prevent default if the target is a draggable element.\n  return !target.draggable;\n}\n\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target) {\n  return !((target.tagName === 'INPUT' || target.tagName === 'BUTTON') && target.type === 'submit');\n}\n\nfunction $f6c31cce2adf654f$var$isVirtualPointerEvent(event) {\n  // If the pointer size is zero, then we assume it's from a screen reader.\n  // Android TalkBack double tap will sometimes return a event with width and height of 1\n  // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.\n  // Cannot use \"event.pressure === 0\" as the sole check due to Safari pointer events always returning pressure === 0\n  // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216\n  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0;\n}\n\nconst $3b117e43dc0ca95d$export$27c701ed9e449e99 = /*#__PURE__*/$bx7SL$react.forwardRef((_ref, ref) => {\n  let {\n    children: children,\n    ...props\n  } = _ref;\n  let newRef = $bx7SL$useRef();\n  ref = ref !== null && ref !== void 0 ? ref : newRef;\n  let {\n    pressProps: pressProps\n  } = $f6c31cce2adf654f$export$45712eceda6fad21({ ...props,\n    ref: ref\n  });\n  let child = $bx7SL$react.Children.only(children);\n  return /*#__PURE__*/$bx7SL$react.cloneElement(child, // @ts-ignore\n  {\n    ref: ref,\n    ...$bx7SL$mergeProps(child.props, pressProps)\n  });\n});\nvar $f1ab8c75478c6f73$exports = {};\n$parcel$export($f1ab8c75478c6f73$exports, \"PressResponder\", () => $f1ab8c75478c6f73$export$3351871ee4b288b8);\nconst $f1ab8c75478c6f73$export$3351871ee4b288b8 = /*#__PURE__*/$bx7SL$react.forwardRef((_ref2, ref) => {\n  let {\n    children: children,\n    ...props\n  } = _ref2;\n  let isRegistered = $bx7SL$useRef(false);\n  let prevContext = $bx7SL$useContext($ae1eeba8b9eafd08$export$5165eccb35aaadb5);\n  let context = $bx7SL$mergeProps(prevContext || {}, { ...props,\n    ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),\n\n    register() {\n      isRegistered.current = true;\n      if (prevContext) prevContext.register();\n    }\n\n  });\n  $bx7SL$useSyncRef(prevContext, ref);\n  $bx7SL$useEffect(() => {\n    if (!isRegistered.current) console.warn(\"A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.\");\n  }, []);\n  return /*#__PURE__*/$bx7SL$react.createElement($ae1eeba8b9eafd08$export$5165eccb35aaadb5.Provider, {\n    value: context\n  }, children);\n});\nvar $a1ea59d68270f0dd$exports = {};\n$parcel$export($a1ea59d68270f0dd$exports, \"useFocus\", () => $a1ea59d68270f0dd$export$f8168d8dd8fd66e6);\n\nfunction $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {\n  let onBlur;\n  if (!props.isDisabled && (props.onBlur || props.onFocusChange)) onBlur = e => {\n    if (e.target === e.currentTarget) {\n      if (props.onBlur) props.onBlur(e);\n      if (props.onFocusChange) props.onFocusChange(false);\n      return true;\n    }\n  };else onBlur = null;\n  let onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);\n  let onFocus;\n  if (!props.isDisabled && (props.onFocus || props.onFocusChange || props.onBlur)) onFocus = e => {\n    if (e.target === e.currentTarget) {\n      if (props.onFocus) props.onFocus(e);\n      if (props.onFocusChange) props.onFocusChange(true);\n      onSyntheticFocus(e);\n    }\n  };\n  return {\n    focusProps: {\n      onFocus: onFocus,\n      onBlur: onBlur\n    }\n  };\n}\n\nvar $507fabe10e71c6fb$exports = {};\n$parcel$export($507fabe10e71c6fb$exports, \"isFocusVisible\", () => $507fabe10e71c6fb$export$b9b3dfddab17db27);\n$parcel$export($507fabe10e71c6fb$exports, \"getInteractionModality\", () => $507fabe10e71c6fb$export$630ff653c5ada6a9);\n$parcel$export($507fabe10e71c6fb$exports, \"setInteractionModality\", () => $507fabe10e71c6fb$export$8397ddfc504fdb9a);\n$parcel$export($507fabe10e71c6fb$exports, \"useInteractionModality\", () => $507fabe10e71c6fb$export$98e20ec92f614cfe);\n$parcel$export($507fabe10e71c6fb$exports, \"useFocusVisible\", () => $507fabe10e71c6fb$export$ffd9e5021c1fb2d6);\n$parcel$export($507fabe10e71c6fb$exports, \"useFocusVisibleListener\", () => $507fabe10e71c6fb$export$ec71b4b83ac08ec3);\nlet $507fabe10e71c6fb$var$currentModality = null;\nlet $507fabe10e71c6fb$var$changeHandlers = new Set();\nlet $507fabe10e71c6fb$var$hasSetupGlobalListeners = false;\nlet $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\nlet $507fabe10e71c6fb$var$hasBlurredWindowRecently = false; // Only Tab or Esc keys will make focus visible on text input elements\n\nconst $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\n\nfunction $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {\n  for (let handler of $507fabe10e71c6fb$var$changeHandlers) handler(modality, e);\n}\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\n\n\nfunction $507fabe10e71c6fb$var$isValidKey(e) {\n  // Control and Shift keys trigger when navigating back to the tab with keyboard.\n  return !(e.metaKey || !$bx7SL$isMac() && e.altKey || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');\n}\n\nfunction $507fabe10e71c6fb$var$handleKeyboardEvent(e) {\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n\n  if ($507fabe10e71c6fb$var$isValidKey(e)) {\n    $507fabe10e71c6fb$var$currentModality = 'keyboard';\n    $507fabe10e71c6fb$var$triggerChangeHandlers('keyboard', e);\n  }\n}\n\nfunction $507fabe10e71c6fb$var$handlePointerEvent(e) {\n  $507fabe10e71c6fb$var$currentModality = 'pointer';\n\n  if (e.type === 'mousedown' || e.type === 'pointerdown') {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    $507fabe10e71c6fb$var$triggerChangeHandlers('pointer', e);\n  }\n}\n\nfunction $507fabe10e71c6fb$var$handleClickEvent(e) {\n  if ($8a9cb279dc87e130$export$60278871457622de(e)) {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    $507fabe10e71c6fb$var$currentModality = 'virtual';\n  }\n}\n\nfunction $507fabe10e71c6fb$var$handleFocusEvent(e) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) return; // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n\n  if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {\n    $507fabe10e71c6fb$var$currentModality = 'virtual';\n    $507fabe10e71c6fb$var$triggerChangeHandlers('virtual', e);\n  }\n\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n  $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n}\n\nfunction $507fabe10e71c6fb$var$handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n  $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;\n}\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\n\n\nfunction $507fabe10e71c6fb$var$setupGlobalFocusEvents() {\n  if (typeof window === 'undefined' || $507fabe10e71c6fb$var$hasSetupGlobalListeners) return; // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n\n  let focus = HTMLElement.prototype.focus;\n\n  HTMLElement.prototype.focus = function () {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n\n  document.addEventListener('keydown', $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  document.addEventListener('keyup', $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  document.addEventListener('click', $507fabe10e71c6fb$var$handleClickEvent, true); // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n\n  window.addEventListener('focus', $507fabe10e71c6fb$var$handleFocusEvent, true);\n  window.addEventListener('blur', $507fabe10e71c6fb$var$handleWindowBlur, false);\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerdown', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('pointermove', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('pointerup', $507fabe10e71c6fb$var$handlePointerEvent, true);\n  } else {\n    document.addEventListener('mousedown', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('mousemove', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('mouseup', $507fabe10e71c6fb$var$handlePointerEvent, true);\n  }\n\n  $507fabe10e71c6fb$var$hasSetupGlobalListeners = true;\n}\n\nif (typeof document !== 'undefined') {\n  if (document.readyState !== 'loading') $507fabe10e71c6fb$var$setupGlobalFocusEvents();else document.addEventListener('DOMContentLoaded', $507fabe10e71c6fb$var$setupGlobalFocusEvents);\n}\n\nfunction $507fabe10e71c6fb$export$b9b3dfddab17db27() {\n  return $507fabe10e71c6fb$var$currentModality !== 'pointer';\n}\n\nfunction $507fabe10e71c6fb$export$630ff653c5ada6a9() {\n  return $507fabe10e71c6fb$var$currentModality;\n}\n\nfunction $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {\n  $507fabe10e71c6fb$var$currentModality = modality;\n  $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);\n}\n\nfunction $507fabe10e71c6fb$export$98e20ec92f614cfe() {\n  $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n  let [modality, setModality] = $bx7SL$useState($507fabe10e71c6fb$var$currentModality);\n  $bx7SL$useEffect(() => {\n    let handler = () => {\n      setModality($507fabe10e71c6fb$var$currentModality);\n    };\n\n    $507fabe10e71c6fb$var$changeHandlers.add(handler);\n    return () => {\n      $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n    };\n  }, []);\n  return modality;\n}\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */\n\n\nfunction $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {\n  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\n\nfunction $507fabe10e71c6fb$export$ffd9e5021c1fb2d6() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n    isTextInput: isTextInput,\n    autoFocus: autoFocus\n  } = props;\n  let [isFocusVisibleState, setFocusVisible] = $bx7SL$useState(autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27());\n  $507fabe10e71c6fb$export$ec71b4b83ac08ec3($507fabe10e71c6fb$export$b9b3dfddab17db27 => {\n    setFocusVisible($507fabe10e71c6fb$export$b9b3dfddab17db27);\n  }, [isTextInput], {\n    isTextInput: isTextInput\n  });\n  return {\n    isFocusVisible: isFocusVisibleState\n  };\n}\n\nfunction $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {\n  $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n  $bx7SL$useEffect(() => {\n    let handler = (modality, e) => {\n      if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e)) return;\n      fn($507fabe10e71c6fb$export$b9b3dfddab17db27());\n    };\n\n    $507fabe10e71c6fb$var$changeHandlers.add(handler);\n    return () => {\n      $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n    };\n  }, deps);\n}\n\nvar $9ab94262bd0047c7$exports = {};\n$parcel$export($9ab94262bd0047c7$exports, \"useFocusWithin\", () => $9ab94262bd0047c7$export$420e68273165f4ec);\n\nfunction $9ab94262bd0047c7$export$420e68273165f4ec(props) {\n  let state = $bx7SL$useRef({\n    isFocusWithin: false\n  }).current;\n  let onBlur = props.isDisabled ? null : e => {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {\n      state.isFocusWithin = false;\n      if (props.onBlurWithin) props.onBlurWithin(e);\n      if (props.onFocusWithinChange) props.onFocusWithinChange(false);\n    }\n  };\n  let onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);\n  let onFocus = props.isDisabled ? null : e => {\n    if (!state.isFocusWithin) {\n      if (props.onFocusWithin) props.onFocusWithin(e);\n      if (props.onFocusWithinChange) props.onFocusWithinChange(true);\n      state.isFocusWithin = true;\n      onSyntheticFocus(e);\n    }\n  };\n  return {\n    focusWithinProps: {\n      onFocus: onFocus,\n      onBlur: onBlur\n    }\n  };\n}\n\nvar $6179b936705e76d3$exports = {};\n$parcel$export($6179b936705e76d3$exports, \"useHover\", () => $6179b936705e76d3$export$ae780daf29e6d456); // iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\n\nlet $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\nlet $6179b936705e76d3$var$hoverCount = 0;\n\nfunction $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {\n  $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true; // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n\n  setTimeout(() => {\n    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\n\nfunction $6179b936705e76d3$var$handleGlobalPointerEvent(e) {\n  if (e.pointerType === 'touch') $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();\n}\n\nfunction $6179b936705e76d3$var$setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') return;\n  if (typeof PointerEvent !== 'undefined') document.addEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);else document.addEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n  $6179b936705e76d3$var$hoverCount++;\n  return () => {\n    $6179b936705e76d3$var$hoverCount--;\n    if ($6179b936705e76d3$var$hoverCount > 0) return;\n    if (typeof PointerEvent !== 'undefined') document.removeEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);else document.removeEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n  };\n}\n\nfunction $6179b936705e76d3$export$ae780daf29e6d456(props) {\n  let {\n    onHoverStart: onHoverStart,\n    onHoverChange: onHoverChange,\n    onHoverEnd: onHoverEnd,\n    isDisabled: isDisabled\n  } = props;\n  let [isHovered, setHovered] = $bx7SL$useState(false);\n  let state = $bx7SL$useRef({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: '',\n    target: null\n  }).current;\n  $bx7SL$useEffect($6179b936705e76d3$var$setupGlobalTouchEvents, []);\n  let {\n    hoverProps: hoverProps1,\n    triggerHoverEnd: triggerHoverEnd1\n  } = $bx7SL$useMemo(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) return;\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n      if (onHoverStart) onHoverStart({\n        type: 'hoverstart',\n        target: target,\n        pointerType: pointerType\n      });\n      if (onHoverChange) onHoverChange(true);\n      setHovered(true);\n    };\n\n    let triggerHoverEnd = (event, pointerType) => {\n      state.pointerType = '';\n      state.target = null;\n      if (pointerType === 'touch' || !state.isHovered) return;\n      state.isHovered = false;\n      let target = event.currentTarget;\n      if (onHoverEnd) onHoverEnd({\n        type: 'hoverend',\n        target: target,\n        pointerType: pointerType\n      });\n      if (onHoverChange) onHoverChange(false);\n      setHovered(false);\n    };\n\n    let hoverProps = {};\n\n    if (typeof PointerEvent !== 'undefined') {\n      hoverProps.onPointerEnter = e => {\n        if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') return;\n        triggerHoverStart(e, e.pointerType);\n      };\n\n      hoverProps.onPointerLeave = e => {\n        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n\n      hoverProps.onMouseEnter = e => {\n        if (!state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, 'mouse');\n        state.ignoreEmulatedMouseEvents = false;\n      };\n\n      hoverProps.onMouseLeave = e => {\n        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, 'mouse');\n      };\n    }\n\n    return {\n      hoverProps: hoverProps,\n      triggerHoverEnd: triggerHoverEnd\n    };\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n  $bx7SL$useEffect(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) triggerHoverEnd1({\n      currentTarget: state.target\n    }, state.pointerType);\n  }, [isDisabled]);\n  return {\n    hoverProps: hoverProps1,\n    isHovered: isHovered\n  };\n}\n\nvar $e0b6e0b68ec7f50f$exports = {};\n$parcel$export($e0b6e0b68ec7f50f$exports, \"useInteractOutside\", () => $e0b6e0b68ec7f50f$export$872b660ac5a1ff98);\n\nfunction $e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {\n  let {\n    ref: ref,\n    onInteractOutside: onInteractOutside,\n    isDisabled: isDisabled,\n    onInteractOutsideStart: onInteractOutsideStart\n  } = props;\n  let stateRef = $bx7SL$useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n    onInteractOutside: onInteractOutside,\n    onInteractOutsideStart: onInteractOutsideStart\n  });\n  let state = stateRef.current;\n  state.onInteractOutside = onInteractOutside;\n  state.onInteractOutsideStart = onInteractOutsideStart;\n  $bx7SL$useEffect(() => {\n    if (isDisabled) return;\n\n    let onPointerDown = e => {\n      if ($e0b6e0b68ec7f50f$var$isValidEvent(e, ref) && state.onInteractOutside) {\n        if (state.onInteractOutsideStart) state.onInteractOutsideStart(e);\n        state.isPointerDown = true;\n      }\n    }; // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n\n\n    if (typeof PointerEvent !== 'undefined') {\n      let onPointerUp = e => {\n        if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      }; // changing these to capture phase fixed combobox\n\n\n      document.addEventListener('pointerdown', onPointerDown, true);\n      document.addEventListener('pointerup', onPointerUp, true);\n      return () => {\n        document.removeEventListener('pointerdown', onPointerDown, true);\n        document.removeEventListener('pointerup', onPointerUp, true);\n      };\n    } else {\n      let onMouseUp = e => {\n        if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;else if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      let onTouchEnd = e => {\n        state.ignoreEmulatedMouseEvents = true;\n\n        if (state.onInteractOutside && state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      document.addEventListener('mousedown', onPointerDown, true);\n      document.addEventListener('mouseup', onMouseUp, true);\n      document.addEventListener('touchstart', onPointerDown, true);\n      document.addEventListener('touchend', onTouchEnd, true);\n      return () => {\n        document.removeEventListener('mousedown', onPointerDown, true);\n        document.removeEventListener('mouseup', onMouseUp, true);\n        document.removeEventListener('touchstart', onPointerDown, true);\n        document.removeEventListener('touchend', onTouchEnd, true);\n      };\n    }\n  }, [ref, state, isDisabled]);\n}\n\nfunction $e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {\n  if (event.button > 0) return false; // if the event target is no longer in the document\n\n  if (event.target) {\n    const ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;\n  }\n\n  return ref.current && !ref.current.contains(event.target);\n}\n\nvar $46d819fcbaf35654$exports = {};\n$parcel$export($46d819fcbaf35654$exports, \"useKeyboard\", () => $46d819fcbaf35654$export$8f71654801c2f7cd);\n\nfunction $93925083ecbb358c$export$48d1ea6320830260(handler) {\n  if (!handler) return;\n  let shouldStopPropagation = true;\n  return e => {\n    let event = { ...e,\n\n      preventDefault() {\n        e.preventDefault();\n      },\n\n      isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n\n      stopPropagation() {\n        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n      },\n\n      continuePropagation() {\n        shouldStopPropagation = false;\n      }\n\n    };\n    handler(event);\n    if (shouldStopPropagation) e.stopPropagation();\n  };\n}\n\nfunction $46d819fcbaf35654$export$8f71654801c2f7cd(props) {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyDown),\n      onKeyUp: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyUp)\n    }\n  };\n}\n\nvar $e8a7022cf87cba2a$exports = {};\n$parcel$export($e8a7022cf87cba2a$exports, \"useMove\", () => $e8a7022cf87cba2a$export$36da96379f79f245);\n\nfunction $e8a7022cf87cba2a$export$36da96379f79f245(props) {\n  let {\n    onMoveStart: onMoveStart,\n    onMove: onMove,\n    onMoveEnd: onMoveEnd\n  } = props;\n  let state = $bx7SL$useRef({\n    didMove: false,\n    lastPosition: null,\n    id: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = $bx7SL$useGlobalListeners();\n  let moveProps1 = $bx7SL$useMemo(() => {\n    let moveProps = {};\n\n    let start = () => {\n      $14c0b72509d70225$export$16a4697467175487();\n      state.current.didMove = false;\n    };\n\n    let move = (originalEvent, pointerType, deltaX, deltaY) => {\n      if (deltaX === 0 && deltaY === 0) return;\n\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({\n          type: 'movestart',\n          pointerType: pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      onMove({\n        type: 'move',\n        pointerType: pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    let end = (originalEvent, pointerType) => {\n      $14c0b72509d70225$export$b0d6fa1ab32e3295();\n      if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({\n        type: 'moveend',\n        pointerType: pointerType,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    if (typeof PointerEvent === 'undefined') {\n      let onMouseMove = e => {\n        if (e.button === 0) {\n          move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n\n      let onMouseUp = e => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      moveProps.onMouseDown = e => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = e => {\n        let touch = [...e.changedTouches].findIndex(_ref3 => {\n          let {\n            identifier: identifier\n          } = _ref3;\n          return identifier === state.current.id;\n        });\n\n        if (touch >= 0) {\n          let {\n            pageX: pageX,\n            pageY: pageY\n          } = e.changedTouches[touch];\n          move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: pageX,\n            pageY: pageY\n          };\n        }\n      };\n\n      let onTouchEnd = e => {\n        let touch = [...e.changedTouches].findIndex(_ref4 => {\n          let {\n            identifier: identifier\n          } = _ref4;\n          return identifier === state.current.id;\n        });\n\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n\n      moveProps.onTouchStart = e => {\n        if (e.changedTouches.length === 0 || state.current.id != null) return;\n        let {\n          pageX: pageX,\n          pageY: pageY,\n          identifier: identifier\n        } = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {\n          pageX: pageX,\n          pageY: pageY\n        };\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = e => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = e.pointerType || 'mouse'; // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n\n          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n\n      let onPointerUp = e => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = e.pointerType || 'mouse';\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n\n      moveProps.onPointerDown = e => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n\n    let triggerKeyboardMove = (e, deltaX, deltaY) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n\n    moveProps.onKeyDown = e => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);\n  return {\n    moveProps: moveProps1\n  };\n}\n\nvar $7d0a636d7a4dcefd$exports = {};\n$parcel$export($7d0a636d7a4dcefd$exports, \"useScrollWheel\", () => $7d0a636d7a4dcefd$export$2123ff2b87c81ca);\n\nfunction $7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {\n  let {\n    onScroll: onScroll,\n    isDisabled: isDisabled\n  } = props;\n  let onScrollHandler = $bx7SL$useCallback(e => {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) return; // stop scrolling the page\n\n    e.preventDefault();\n    e.stopPropagation();\n    if (onScroll) onScroll({\n      deltaX: e.deltaX,\n      deltaY: e.deltaY\n    });\n  }, [onScroll]);\n  $bx7SL$useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);\n}\n\nvar $8a26561d2877236e$exports = {};\n$parcel$export($8a26561d2877236e$exports, \"useLongPress\", () => $8a26561d2877236e$export$c24ed0104d07eab9);\nconst $8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;\n\nfunction $8a26561d2877236e$export$c24ed0104d07eab9(props) {\n  let {\n    isDisabled: isDisabled,\n    onLongPressStart: onLongPressStart,\n    onLongPressEnd: onLongPressEnd,\n    onLongPress: onLongPress,\n    threshold = $8a26561d2877236e$var$DEFAULT_THRESHOLD,\n    accessibilityDescription: accessibilityDescription\n  } = props;\n  const timeRef = $bx7SL$useRef(null);\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = $bx7SL$useGlobalListeners();\n  let {\n    pressProps: pressProps\n  } = $f6c31cce2adf654f$export$45712eceda6fad21({\n    isDisabled: isDisabled,\n\n    onPressStart(e1) {\n      if (e1.pointerType === 'mouse' || e1.pointerType === 'touch') {\n        if (onLongPressStart) onLongPressStart({ ...e1,\n          type: 'longpressstart'\n        });\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e1.target.dispatchEvent(new PointerEvent('pointercancel', {\n            bubbles: true\n          }));\n          if (onLongPress) onLongPress({ ...e1,\n            type: 'longpress'\n          });\n          timeRef.current = null;\n        }, threshold); // Prevent context menu, which may be opened on long press on touch devices\n\n        if (e1.pointerType === 'touch') {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n\n          addGlobalListener(e1.target, 'contextmenu', onContextMenu, {\n            once: true\n          });\n          addGlobalListener(window, 'pointerup', () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e1.target, 'contextmenu', onContextMenu);\n            }, 30);\n          }, {\n            once: true\n          });\n        }\n      }\n    },\n\n    onPressEnd(e) {\n      if (timeRef.current) clearTimeout(timeRef.current);\n      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) onLongPressEnd({ ...e,\n        type: 'longpressend'\n      });\n    }\n\n  });\n  let descriptionProps = $bx7SL$useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);\n  return {\n    longPressProps: $bx7SL$mergeProps(pressProps, descriptionProps)\n  };\n}\n\nexport { $3b117e43dc0ca95d$export$27c701ed9e449e99 as Pressable, $f1ab8c75478c6f73$export$3351871ee4b288b8 as PressResponder, $a1ea59d68270f0dd$export$f8168d8dd8fd66e6 as useFocus, $507fabe10e71c6fb$export$b9b3dfddab17db27 as isFocusVisible, $507fabe10e71c6fb$export$630ff653c5ada6a9 as getInteractionModality, $507fabe10e71c6fb$export$8397ddfc504fdb9a as setInteractionModality, $507fabe10e71c6fb$export$98e20ec92f614cfe as useInteractionModality, $507fabe10e71c6fb$export$ffd9e5021c1fb2d6 as useFocusVisible, $507fabe10e71c6fb$export$ec71b4b83ac08ec3 as useFocusVisibleListener, $9ab94262bd0047c7$export$420e68273165f4ec as useFocusWithin, $6179b936705e76d3$export$ae780daf29e6d456 as useHover, $e0b6e0b68ec7f50f$export$872b660ac5a1ff98 as useInteractOutside, $46d819fcbaf35654$export$8f71654801c2f7cd as useKeyboard, $e8a7022cf87cba2a$export$36da96379f79f245 as useMove, $f6c31cce2adf654f$export$45712eceda6fad21 as usePress, $7d0a636d7a4dcefd$export$2123ff2b87c81ca as useScrollWheel, $8a26561d2877236e$export$c24ed0104d07eab9 as useLongPress };","map":{"version":3,"mappings":"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","names":["$14c0b72509d70225$var$state","$14c0b72509d70225$var$savedUserSelect","$14c0b72509d70225$var$modifiedElementMap","WeakMap","$14c0b72509d70225$export$16a4697467175487","target","$bx7SL$isIOS","document","documentElement","style","webkitUserSelect","set","userSelect","$14c0b72509d70225$export$b0d6fa1ab32e3295","setTimeout","$bx7SL$runAfterTransition","has","targetOldUserSelect","get","getAttribute","removeAttribute","delete","$8a9cb279dc87e130$export$60278871457622de","event","mozInputSource","isTrusted","detail","pointerType","$8a9cb279dc87e130$export$905e7fc544a71f36","isDefaultPrevented","nativeEvent","defaultPrevented","preventDefault","stopPropagation","isPropagationStopped","persist","type","currentTarget","relatedTarget","bubbles","cancelable","eventPhase","timeStamp","$8a9cb279dc87e130$export$715c682d09d639cc","onBlur","stateRef","$bx7SL$useRef","isFocused","observer","state1","current","$bx7SL$useLayoutEffect","disconnect","e1","HTMLButtonElement","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","onBlurHandler","e","ref","state","disabled","call","addEventListener","once","MutationObserver","dispatchEvent","FocusEvent","observe","attributes","attributeFilter","$ae1eeba8b9eafd08$export$5165eccb35aaadb5","$bx7SL$react","createContext","displayName","$f6c31cce2adf654f$var$usePressResponderContext","props","context","$bx7SL$useContext","register","contextProps","$bx7SL$mergeProps","$bx7SL$useSyncRef","$f6c31cce2adf654f$export$45712eceda6fad21","onPress","onPress1","onPressChange","onPressChange1","onPressStart","onPressStart1","onPressEnd","onPressEnd1","onPressUp","onPressUp1","isDisabled","isDisabled1","isPressed","isPressedProp","preventFocusOnPress","shouldCancelOnPointerExit","allowTextSelectionOnPress","_","domProps","propsRef","setPressed","$bx7SL$useState","ignoreEmulatedMouseEvents","ignoreClickAfterPress","didFirePressStart","activePointerId","isOverTarget","addGlobalListener","removeAllGlobalListeners","$bx7SL$useGlobalListeners","pressProps1","$bx7SL$useMemo","triggerPressStart","originalEvent","shiftKey","metaKey","ctrlKey","altKey","triggerPressEnd","wasPressed","triggerPressUp","cancel","$f6c31cce2adf654f$var$createEvent","pressProps","onKeyDown","$f6c31cce2adf654f$var$isValidKeyboardEvent","contains","$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard","repeat","onKeyUp","onClick","button","$bx7SL$focusWithoutScrolling","$f6c31cce2adf654f$var$isHTMLAnchorLink","click","PointerEvent","onPointerDown","$f6c31cce2adf654f$var$isVirtualPointerEvent","$f6c31cce2adf654f$var$shouldPreventDefault","pointerId","onPointerMove","onPointerUp","onPointerCancel","onMouseDown","$f6c31cce2adf654f$var$isOverTarget","onDragStart","onMouseUp","onMouseEnter","onMouseLeave","onTouchStart","touch","$f6c31cce2adf654f$var$getTouchFromEvent","identifier","window","onScroll","onTouchMove","$f6c31cce2adf654f$var$getTouchById","onTouchEnd","onTouchCancel","$bx7SL$useEffect","tagName","hasAttribute","key","code","element","isContentEditable","role","targetTouches","length","changedTouches","i","$f6c31cce2adf654f$var$getPointClientRect","point","offsetX","width","radiusX","offsetY","height","radiusY","top","clientY","right","clientX","bottom","left","$f6c31cce2adf654f$var$areRectanglesOverlapping","a","b","rect","getBoundingClientRect","pointRect","draggable","pressure","$3b117e43dc0ca95d$export$27c701ed9e449e99","forwardRef","children","newRef","child","Children","only","cloneElement","$f1ab8c75478c6f73$export$3351871ee4b288b8","isRegistered","prevContext","console","warn","Provider","value","$a1ea59d68270f0dd$export$f8168d8dd8fd66e6","onFocusChange","onSyntheticFocus","onFocus","focusProps","$507fabe10e71c6fb$var$currentModality","$507fabe10e71c6fb$var$changeHandlers","Set","$507fabe10e71c6fb$var$hasSetupGlobalListeners","$507fabe10e71c6fb$var$hasEventBeforeFocus","$507fabe10e71c6fb$var$hasBlurredWindowRecently","$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS","Tab","Escape","$507fabe10e71c6fb$var$triggerChangeHandlers","modality","handler","$507fabe10e71c6fb$var$isValidKey","$bx7SL$isMac","$507fabe10e71c6fb$var$handleKeyboardEvent","$507fabe10e71c6fb$var$handlePointerEvent","$507fabe10e71c6fb$var$handleClickEvent","$507fabe10e71c6fb$var$handleFocusEvent","$507fabe10e71c6fb$var$handleWindowBlur","$507fabe10e71c6fb$var$setupGlobalFocusEvents","focus","HTMLElement","prototype","apply","arguments","readyState","$507fabe10e71c6fb$export$b9b3dfddab17db27","$507fabe10e71c6fb$export$630ff653c5ada6a9","$507fabe10e71c6fb$export$8397ddfc504fdb9a","$507fabe10e71c6fb$export$98e20ec92f614cfe","setModality","add","$507fabe10e71c6fb$var$isKeyboardFocusEvent","isTextInput","KeyboardEvent","$507fabe10e71c6fb$export$ffd9e5021c1fb2d6","autoFocus","isFocusVisibleState","setFocusVisible","$507fabe10e71c6fb$export$ec71b4b83ac08ec3","isFocusVisible","fn","deps","opts","$9ab94262bd0047c7$export$420e68273165f4ec","isFocusWithin","onBlurWithin","onFocusWithinChange","onFocusWithin","focusWithinProps","$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$hoverCount","$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$handleGlobalPointerEvent","$6179b936705e76d3$var$setupGlobalTouchEvents","removeEventListener","$6179b936705e76d3$export$ae780daf29e6d456","onHoverStart","onHoverChange","onHoverEnd","isHovered","setHovered","hoverProps","triggerHoverEnd","triggerHoverEnd1","triggerHoverStart","onPointerEnter","onPointerLeave","hoverProps1","$e0b6e0b68ec7f50f$export$872b660ac5a1ff98","onInteractOutside","onInteractOutsideStart","isPointerDown","$e0b6e0b68ec7f50f$var$isValidEvent","ownerDocument","$93925083ecbb358c$export$48d1ea6320830260","shouldStopPropagation","error","continuePropagation","$46d819fcbaf35654$export$8f71654801c2f7cd","keyboardProps","$e8a7022cf87cba2a$export$36da96379f79f245","onMoveStart","onMove","onMoveEnd","didMove","lastPosition","id","removeGlobalListener","moveProps1","moveProps","start","move","deltaX","deltaY","end","onMouseMove","pageX","pageY","findIndex","triggerKeyboardMove","$7d0a636d7a4dcefd$export$2123ff2b87c81ca","onScrollHandler","$bx7SL$useCallback","$bx7SL$useEvent","$8a26561d2877236e$var$DEFAULT_THRESHOLD","$8a26561d2877236e$export$c24ed0104d07eab9","onLongPressStart","onLongPressEnd","onLongPress","threshold","accessibilityDescription","timeRef","onContextMenu","clearTimeout","descriptionProps","$bx7SL$useDescription","longPressProps"],"sources":["C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\textSelection.ts","C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\utils.ts","C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\context.ts","C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\usePress.ts","C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\Pressable.tsx","C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\PressResponder.tsx","C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useFocus.ts","C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useFocusVisible.ts","C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useFocusWithin.ts","C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useHover.ts","C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useInteractOutside.ts","C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\createEventHandler.ts","C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useKeyboard.ts","C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useMove.ts","C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useScrollWheel.ts","C:\\Users\\Charles Amoah Ansong\\Desktop\\Projects\\mobile-subscribe\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useLongPress.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isIOS, runAfterTransition} from '@react-aria/utils';\n\n// Safari on iOS starts selecting text on long press. The only way to avoid this, it seems,\n// is to add user-select: none to the entire page. Adding it to the pressable element prevents\n// that element from being selected, but nearby elements may still receive selection. We add\n// user-select: none on touch start, and remove it again on touch end to prevent this.\n// This must be implemented using global state to avoid race conditions between multiple elements.\n\n// There are three possible states due to the delay before removing user-select: none after\n// pointer up. The 'default' state always transitions to the 'disabled' state, which transitions\n// to 'restoring'. The 'restoring' state can either transition back to 'disabled' or 'default'.\n\n// For non-iOS devices, we apply user-select: none to the pressed element instead to avoid possible\n// performance issues that arise from applying and removing user-select: none to the entire page\n// (see https://github.com/adobe/react-spectrum/issues/1609).\ntype State = 'default' | 'disabled' | 'restoring';\n\n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\nlet state: State = 'default';\nlet savedUserSelect = '';\nlet modifiedElementMap = new WeakMap<HTMLElement, string>();\n\nexport function disableTextSelection(target?: HTMLElement) {\n  if (isIOS()) {\n    if (state === 'default') {\n      savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = 'none';\n    }\n\n    state = 'disabled';\n  } else if (target) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = 'none';\n  }\n}\n\nexport function restoreTextSelection(target?: HTMLElement) {\n  if (isIOS()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if (state !== 'disabled') {\n      return;\n    }\n\n    state = 'restoring';\n\n    // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      runAfterTransition(() => {\n        // Avoid race conditions\n        if (state === 'restoring') {\n          if (document.documentElement.style.webkitUserSelect === 'none') {\n            document.documentElement.style.webkitUserSelect = savedUserSelect || '';\n          }\n\n          savedUserSelect = '';\n          state = 'default';\n        }\n      });\n    }, 300);\n  } else {\n    // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    if (target && modifiedElementMap.has(target)) {\n      let targetOldUserSelect = modifiedElementMap.get(target);\n\n      if (target.style.userSelect === 'none') {\n        target.style.userSelect = targetOldUserSelect;\n      }\n\n      if (target.getAttribute('style') === '') {\n        target.removeAttribute('style');\n      }\n      modifiedElementMap.delete(target);\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvent as ReactFocusEvent, useRef} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\n// Original licensing for the following method can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/blob/3c713d513195a53788b3f8bb4b70279d68b15bcc/packages/react-interactions/events/src/dom/shared/index.js#L74-L87\n\n// Keyboards, Assistive Technologies, and element.click() all produce a \"virtual\"\n// click event. This is a method of inferring such clicks. Every browser except\n// IE 11 only sets a zero value of \"detail\" for click events that are \"virtual\".\n// However, IE 11 uses a zero value for all click events. For IE 11 we rely on\n// the quirk that it produces click events that are of type PointerEvent, and\n// where only the \"virtual\" click lacks a pointerType field.\n\nexport function isVirtualClick(event: MouseEvent | PointerEvent): boolean {\n  // JAWS/NVDA with Firefox.\n  if ((event as any).mozInputSource === 0 && event.isTrusted) {\n    return true;\n  }\n\n  return event.detail === 0 && !(event as PointerEvent).pointerType;\n}\n\nexport class SyntheticFocusEvent implements ReactFocusEvent {\n  nativeEvent: FocusEvent;\n  target: Element;\n  currentTarget: Element;\n  relatedTarget: Element;\n  bubbles: boolean;\n  cancelable: boolean;\n  defaultPrevented: boolean;\n  eventPhase: number;\n  isTrusted: boolean;\n  timeStamp: number;\n  type: string;\n\n  constructor(type: string, nativeEvent: FocusEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target as Element;\n    this.currentTarget = nativeEvent.currentTarget as Element;\n    this.relatedTarget = nativeEvent.relatedTarget as Element;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n\n  isDefaultPrevented(): boolean {\n    return this.nativeEvent.defaultPrevented;\n  }\n\n  preventDefault(): void {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n\n  stopPropagation(): void {\n    this.nativeEvent.stopPropagation();\n    this.isPropagationStopped = () => true;\n  }\n\n  isPropagationStopped(): boolean {\n    return false;\n  }\n\n  persist() {}\n}\n\nexport function useSyntheticBlurEvent(onBlur: (e: ReactFocusEvent) => void) {\n  let stateRef = useRef({\n    isFocused: false,\n    onBlur,\n    observer: null as MutationObserver\n  });\n  let state = stateRef.current;\n  state.onBlur = onBlur;\n\n  // Clean up MutationObserver on unmount. See below.\n  // eslint-disable-next-line arrow-body-style\n  useLayoutEffect(() => {\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, [state]);\n\n  // This function is called during a React onFocus event.\n  return (e: ReactFocusEvent) => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (\n      e.target instanceof HTMLButtonElement ||\n      e.target instanceof HTMLInputElement ||\n      e.target instanceof HTMLTextAreaElement ||\n      e.target instanceof HTMLSelectElement\n    ) {\n      state.isFocused = true;\n\n      let target = e.target;\n      let onBlurHandler = (e: FocusEvent) => {\n        let state = stateRef.current;\n        state.isFocused = false;\n\n        if (target.disabled) {\n          // For backward compatibility, dispatch a (fake) React synthetic event.\n          state.onBlur?.(new SyntheticFocusEvent('blur', e));\n        }\n\n        // We no longer need the MutationObserver once the target is blurred.\n        if (state.observer) {\n          state.observer.disconnect();\n          state.observer = null;\n        }\n      };\n\n      target.addEventListener('focusout', onBlurHandler, {once: true});\n\n      state.observer = new MutationObserver(() => {\n        if (state.isFocused && target.disabled) {\n          state.observer.disconnect();\n          target.dispatchEvent(new FocusEvent('blur'));\n          target.dispatchEvent(new FocusEvent('focusout', {bubbles: true}));\n        }\n      });\n\n      state.observer.observe(target, {attributes: true, attributeFilter: ['disabled']});\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PressProps} from './usePress';\nimport React, {MutableRefObject} from 'react';\n\ninterface IPressResponderContext extends PressProps {\n  register(): void,\n  ref?: MutableRefObject<HTMLElement>\n}\n\nexport const PressResponderContext = React.createContext<IPressResponderContext>(null);\nPressResponderContext.displayName = 'PressResponderContext';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {disableTextSelection, restoreTextSelection} from './textSelection';\nimport {focusWithoutScrolling, mergeProps, useGlobalListeners, useSyncRef} from '@react-aria/utils';\nimport {HTMLAttributes, RefObject, useContext, useEffect, useMemo, useRef, useState} from 'react';\nimport {isVirtualClick} from './utils';\nimport {PointerType, PressEvents} from '@react-types/shared';\nimport {PressResponderContext} from './context';\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean,\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean,\n  /** Whether the target should not receive focus on press. */\n  preventFocusOnPress?: boolean,\n  /**\n   * Whether press events should be canceled when the pointer leaves the target while pressed.\n   * By default, this is `false`, which means if the pointer returns back over the target while\n   * still pressed, onPressStart will be fired again. If set to `true`, the press is canceled\n   * when the pointer leaves the target and onPressStart will not be fired if the pointer returns.\n   */\n  shouldCancelOnPointerExit?: boolean,\n  /** Whether text selection should be enabled on the pressable element. */\n  allowTextSelectionOnPress?: boolean\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<HTMLElement>\n}\n\ninterface PressState {\n  isPressed: boolean,\n  ignoreEmulatedMouseEvents: boolean,\n  ignoreClickAfterPress: boolean,\n  didFirePressStart: boolean,\n  activePointerId: any,\n  target: HTMLElement | null,\n  isOverTarget: boolean,\n  pointerType: PointerType,\n  userSelect?: string\n}\n\ninterface EventBase {\n  currentTarget: EventTarget,\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\nexport interface PressResult {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean,\n  /** Props to spread on the target element. */\n  pressProps: HTMLAttributes<HTMLElement>\n}\n\nfunction usePressResponderContext(props: PressHookProps): PressHookProps {\n  // Consume context from <PressResponder> and merge with props.\n  let context = useContext(PressResponderContext);\n  if (context) {\n    let {register, ...contextProps} = context;\n    props = mergeProps(contextProps, props) as PressHookProps;\n    register();\n  }\n  useSyncRef(context, props.ref);\n\n  return props;\n}\n\n/**\n * Handles press interactions across mouse, touch, keyboard, and screen readers.\n * It normalizes behavior across browsers and platforms, and handles many nuances\n * of dealing with pointer and keyboard events.\n */\nexport function usePress(props: PressHookProps): PressResult {\n  let {\n    onPress,\n    onPressChange,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    isDisabled,\n    isPressed: isPressedProp,\n    preventFocusOnPress,\n    shouldCancelOnPointerExit,\n    allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _, // Removing `ref` from `domProps` because TypeScript is dumb\n    ...domProps\n  } = usePressResponderContext(props);\n  let propsRef = useRef<PressHookProps>(null);\n  propsRef.current = {onPress, onPressChange, onPressStart, onPressEnd, onPressUp, isDisabled, shouldCancelOnPointerExit};\n\n  let [isPressed, setPressed] = useState(false);\n  let ref = useRef<PressState>({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n\n  let {addGlobalListener, removeAllGlobalListeners} = useGlobalListeners();\n\n  let pressProps = useMemo(() => {\n    let state = ref.current;\n    let triggerPressStart = (originalEvent: EventBase, pointerType: PointerType) => {\n      let {onPressStart, onPressChange, isDisabled} = propsRef.current;\n      if (isDisabled || state.didFirePressStart) {\n        return;\n      }\n\n      if (onPressStart) {\n        onPressStart({\n          type: 'pressstart',\n          pointerType,\n          target: originalEvent.currentTarget as HTMLElement,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(true);\n      }\n\n      state.didFirePressStart = true;\n      setPressed(true);\n    };\n\n    let triggerPressEnd = (originalEvent: EventBase, pointerType: PointerType, wasPressed = true) => {\n      let {onPressEnd, onPressChange, onPress, isDisabled} = propsRef.current;\n      if (!state.didFirePressStart) {\n        return;\n      }\n\n      state.ignoreClickAfterPress = true;\n      state.didFirePressStart = false;\n\n      if (onPressEnd) {\n        onPressEnd({\n          type: 'pressend',\n          pointerType,\n          target: originalEvent.currentTarget as HTMLElement,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(false);\n      }\n\n      setPressed(false);\n\n      if (onPress && wasPressed && !isDisabled) {\n        onPress({\n          type: 'press',\n          pointerType,\n          target: originalEvent.currentTarget as HTMLElement,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    let triggerPressUp = (originalEvent: EventBase, pointerType: PointerType) => {\n      let {onPressUp, isDisabled} = propsRef.current;\n      if (isDisabled) {\n        return;\n      }\n\n      if (onPressUp) {\n        onPressUp({\n          type: 'pressup',\n          pointerType,\n          target: originalEvent.currentTarget as HTMLElement,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    let cancel = (e: EventBase) => {\n      if (state.isPressed) {\n        if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n        state.isPressed = false;\n        state.isOverTarget = false;\n        state.activePointerId = null;\n        state.pointerType = null;\n        removeAllGlobalListeners();\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n      }\n    };\n\n    let pressProps: HTMLAttributes<HTMLElement> = {\n      onKeyDown(e) {\n        if (isValidKeyboardEvent(e.nativeEvent) && e.currentTarget.contains(e.target as HTMLElement)) {\n          if (shouldPreventDefaultKeyboard(e.target as Element)) {\n            e.preventDefault();\n          }\n          e.stopPropagation();\n\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget as HTMLElement;\n            state.isPressed = true;\n            triggerPressStart(e, 'keyboard');\n\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n            addGlobalListener(document, 'keyup', onKeyUp, false);\n          }\n        }\n      },\n      onKeyUp(e) {\n        if (isValidKeyboardEvent(e.nativeEvent) && !e.repeat && e.currentTarget.contains(e.target as HTMLElement)) {\n          triggerPressUp(createEvent(state.target, e), 'keyboard');\n        }\n      },\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        if (e && e.button === 0) {\n          e.stopPropagation();\n          if (isDisabled) {\n            e.preventDefault();\n          }\n\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || isVirtualClick(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled && !preventFocusOnPress) {\n              focusWithoutScrolling(e.currentTarget);\n            }\n\n            triggerPressStart(e, 'virtual');\n            triggerPressUp(e, 'virtual');\n            triggerPressEnd(e, 'virtual');\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n    };\n\n    let onKeyUp = (e: KeyboardEvent) => {\n      if (state.isPressed && isValidKeyboardEvent(e)) {\n        if (shouldPreventDefaultKeyboard(e.target as Element)) {\n          e.preventDefault();\n        }\n        e.stopPropagation();\n\n        state.isPressed = false;\n        let target = e.target as HTMLElement;\n        triggerPressEnd(createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners();\n\n        // If the target is a link, trigger the click method to open the URL,\n        // but defer triggering pressEnd until onClick event handler.\n        if (state.target.contains(target) && isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link') {\n          state.target.click();\n        }\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = (e) => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if (isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget as HTMLElement)) {\n          e.preventDefault();\n        }\n\n        state.pointerType = e.pointerType;\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n\n          if (!isDisabled && !preventFocusOnPress) {\n            focusWithoutScrolling(e.currentTarget);\n          }\n\n          if (!allowTextSelectionOnPress) {\n            disableTextSelection(state.target);\n          }\n\n          triggerPressStart(e, state.pointerType);\n\n          addGlobalListener(document, 'pointermove', onPointerMove, false);\n          addGlobalListener(document, 'pointerup', onPointerUp, false);\n          addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n        }\n      };\n\n      pressProps.onMouseDown = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if (shouldPreventDefault(e.currentTarget as HTMLElement)) {\n            e.preventDefault();\n          }\n\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onPointerUp = (e) => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target as HTMLElement) || state.pointerType === 'virtual') {\n          return;\n        }\n\n        // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n        if (e.button === 0 && isOverTarget(e, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType || e.pointerType);\n        }\n      };\n\n      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId !== state.activePointerId) {\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if (isOverTarget(e, state.target)) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType);\n          } else if (state.isOverTarget) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          }\n\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) {\n            restoreTextSelection(state.target);\n          }\n        }\n      };\n\n      let onPointerCancel = (e: PointerEvent) => {\n        cancel(e);\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = (e) => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget as HTMLElement)) {\n          e.preventDefault();\n        }\n\n        e.stopPropagation();\n        if (state.ignoreEmulatedMouseEvents) {\n          return;\n        }\n\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse';\n\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        triggerPressStart(e, state.pointerType);\n\n        addGlobalListener(document, 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, state.pointerType);\n        }\n      };\n\n      pressProps.onMouseLeave = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      pressProps.onMouseUp = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) {\n          triggerPressUp(e, state.pointerType);\n        }\n      };\n\n      let onMouseUp = (e: MouseEvent) => {\n        // Only handle left clicks\n        if (e.button !== 0) {\n          return;\n        }\n\n        state.isPressed = false;\n        removeAllGlobalListeners();\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        let touch = getTouchFromEvent(e.nativeEvent);\n        if (!touch) {\n          return;\n        }\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch';\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        if (!allowTextSelectionOnPress) {\n          disableTextSelection(state.target);\n        }\n\n        triggerPressStart(e, state.pointerType);\n\n        addGlobalListener(window, 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      pressProps.onTouchEnd = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(e, state.pointerType, false);\n        }\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n        removeAllGlobalListeners();\n      };\n\n      pressProps.onTouchCancel = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed) {\n          cancel(e);\n        }\n      };\n\n      let onScroll = (e: Event) => {\n        if (state.isPressed && (e.target as HTMLElement).contains(state.target)) {\n          cancel({\n            currentTarget: state.target,\n            shiftKey: false,\n            ctrlKey: false,\n            metaKey: false,\n            altKey: false\n          });\n        }\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        cancel(e);\n      };\n    }\n\n    return pressProps;\n  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]);\n\n  // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      if (!allowTextSelectionOnPress) {\n        restoreTextSelection(ref.current.target);\n      }\n    };\n  }, [allowTextSelectionOnPress]);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: mergeProps(domProps, pressProps)\n  };\n}\n\nfunction isHTMLAnchorLink(target: HTMLElement): boolean {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction isValidKeyboardEvent(event: KeyboardEvent): boolean {\n  const {key, code, target} = event;\n  const element = target as HTMLElement;\n  const {tagName, isContentEditable} = element;\n  const role = element.getAttribute('role');\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (\n    (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') &&\n    (tagName !== 'INPUT' &&\n      tagName !== 'TEXTAREA' &&\n      isContentEditable !== true) &&\n    // A link with a valid href should be handled natively,\n    // unless it also has role='button' and was triggered using Space.\n    (!isHTMLAnchorLink(element) || (role === 'button' && key !== 'Enter')) &&\n    // An element with role='link' should only trigger with Enter key\n    !(role === 'link' && key !== 'Enter')\n  );\n}\n\nfunction getTouchFromEvent(event: TouchEvent): Touch | null {\n  const {targetTouches} = event;\n  if (targetTouches.length > 0) {\n    return targetTouches[0];\n  }\n  return null;\n}\n\nfunction getTouchById(\n  event: TouchEvent,\n  pointerId: null | number\n): null | Touch {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) {\n      return touch;\n    }\n  }\n  return null;\n}\n\nfunction createEvent(target: HTMLElement, e: EventBase): EventBase {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\n\ninterface Rect {\n  top: number,\n  right: number,\n  bottom: number,\n  left: number\n}\n\ninterface EventPoint {\n  clientX: number,\n  clientY: number,\n  width?: number,\n  height?: number,\n  radiusX?: number,\n  radiusY?: number\n}\n\nfunction getPointClientRect(point: EventPoint): Rect {\n  let offsetX = (point.width / 2) || point.radiusX || 0;\n  let offsetY = (point.height / 2) || point.radiusY || 0;\n\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\n\nfunction areRectanglesOverlapping(a: Rect, b: Rect) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) {\n    return false;\n  }\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) {\n    return false;\n  }\n  return true;\n}\n\nfunction isOverTarget(point: EventPoint, target: HTMLElement) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = getPointClientRect(point);\n  return areRectanglesOverlapping(rect, pointRect);\n}\n\nfunction shouldPreventDefault(target: HTMLElement) {\n  // We cannot prevent default if the target is a draggable element.\n  return !target.draggable;\n}\n\nfunction shouldPreventDefaultKeyboard(target: Element) {\n  return !((target.tagName === 'INPUT' || target.tagName === 'BUTTON') && (target as HTMLButtonElement | HTMLInputElement).type === 'submit');\n}\n\nfunction isVirtualPointerEvent(event: PointerEvent) {\n  // If the pointer size is zero, then we assume it's from a screen reader.\n  // Android TalkBack double tap will sometimes return a event with width and height of 1\n  // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.\n  // Cannot use \"event.pressure === 0\" as the sole check due to Safari pointer events always returning pressure === 0\n  // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216\n  return (\n    (event.width === 0 && event.height === 0) ||\n    (event.width === 1 &&\n      event.height === 1 &&\n      event.pressure === 0 &&\n      event.detail === 0\n    )\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {mergeProps} from '@react-aria/utils';\nimport {PressProps, usePress} from './usePress';\nimport React, {HTMLAttributes, ReactElement, RefObject, useRef} from 'react';\n\ninterface PressableProps extends PressProps {\n  children: ReactElement<HTMLAttributes<HTMLElement>, string>\n}\n\nexport const Pressable = React.forwardRef(({children, ...props}: PressableProps, ref: RefObject<HTMLElement>) => {\n  let newRef = useRef();\n  ref = ref ?? newRef;\n  let {pressProps} = usePress({...props, ref});\n  let child = React.Children.only(children);\n  return React.cloneElement(\n    child,\n    // @ts-ignore\n    {ref, ...mergeProps(child.props, pressProps)}\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {mergeProps, useSyncRef} from '@react-aria/utils';\nimport {PressProps} from './usePress';\nimport {PressResponderContext} from './context';\nimport React, {ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\n\ninterface PressResponderProps extends PressProps {\n  children: ReactNode\n}\n\nexport const PressResponder = React.forwardRef(({children, ...props}: PressResponderProps, ref: RefObject<HTMLElement>) => {\n  let isRegistered = useRef(false);\n  let prevContext = useContext(PressResponderContext);\n  let context = mergeProps(prevContext || {}, {\n    ...props,\n    ref: ref || prevContext?.ref,\n    register() {\n      isRegistered.current = true;\n      if (prevContext) {\n        prevContext.register();\n      }\n    }\n  });\n\n  useSyncRef(prevContext, ref);\n\n  useEffect(() => {\n    if (!isRegistered.current) {\n      console.warn(\n        'A PressResponder was rendered without a pressable child. ' +\n        'Either call the usePress hook, or wrap your DOM node with <Pressable> component.'\n      );\n    }\n  }, []);\n\n  return (\n    <PressResponderContext.Provider value={context}>\n      {children}\n    </PressResponderContext.Provider>\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {FocusEvent, HTMLAttributes} from 'react';\nimport {FocusEvents} from '@react-types/shared';\nimport {useSyntheticBlurEvent} from './utils';\n\ninterface FocusProps extends FocusEvents {\n  /** Whether the focus events should be disabled. */\n  isDisabled?: boolean\n}\n\ninterface FocusResult {\n  /** Props to spread onto the target element. */\n  focusProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles focus events for the immediate target.\n * Focus events on child elements will be ignored.\n */\nexport function useFocus(props: FocusProps): FocusResult {\n  let onBlur: FocusProps['onBlur'];\n  if (!props.isDisabled && (props.onBlur || props.onFocusChange)) {\n    onBlur = (e: FocusEvent) => {\n      if (e.target === e.currentTarget) {\n        if (props.onBlur) {\n          props.onBlur(e);\n        }\n\n        if (props.onFocusChange) {\n          props.onFocusChange(false);\n        }\n\n        return true;\n      }\n    };\n  } else {\n    onBlur = null;\n  }\n\n  let onSyntheticFocus = useSyntheticBlurEvent(onBlur);\n\n  let onFocus: FocusProps['onFocus'];\n  if (!props.isDisabled && (props.onFocus || props.onFocusChange || props.onBlur)) {\n    onFocus = (e: FocusEvent) => {\n      if (e.target === e.currentTarget) {\n        if (props.onFocus) {\n          props.onFocus(e);\n        }\n\n        if (props.onFocusChange) {\n          props.onFocusChange(true);\n        }\n\n        onSyntheticFocus(e);\n      }\n    };\n  }\n\n  return {\n    focusProps: {\n      onFocus,\n      onBlur\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {isMac} from '@react-aria/utils';\nimport {isVirtualClick} from './utils';\nimport {useEffect, useState} from 'react';\n\ntype Modality = 'keyboard' | 'pointer' | 'virtual';\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent;\ntype Handler = (modality: Modality, e: HandlerEvent) => void;\ntype FocusVisibleHandler = (isFocusVisible: boolean) => void;\ninterface FocusVisibleProps {\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\ninterface FocusVisibleResult {\n  /** Whether keyboard focus is visible globally. */\n  isFocusVisible: boolean\n}\n\nlet currentModality = null;\nlet changeHandlers = new Set<Handler>();\nlet hasSetupGlobalListeners = false;\nlet hasEventBeforeFocus = false;\nlet hasBlurredWindowRecently = false;\n\n// Only Tab or Esc keys will make focus visible on text input elements\nconst FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\n\nfunction triggerChangeHandlers(modality: Modality, e: HandlerEvent) {\n  for (let handler of changeHandlers) {\n    handler(modality, e);\n  }\n}\n\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\nfunction isValidKey(e: KeyboardEvent) {\n  // Control and Shift keys trigger when navigating back to the tab with keyboard.\n  return !(e.metaKey || (!isMac() && e.altKey) || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');\n}\n\n\nfunction handleKeyboardEvent(e: KeyboardEvent) {\n  hasEventBeforeFocus = true;\n  if (isValidKey(e)) {\n    currentModality = 'keyboard';\n    triggerChangeHandlers('keyboard', e);\n  }\n}\n\nfunction handlePointerEvent(e: PointerEvent | MouseEvent) {\n  currentModality = 'pointer';\n  if (e.type === 'mousedown' || e.type === 'pointerdown') {\n    hasEventBeforeFocus = true;\n    triggerChangeHandlers('pointer', e);\n  }\n}\n\nfunction handleClickEvent(e: MouseEvent) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true;\n    currentModality = 'virtual';\n  }\n}\n\nfunction handleFocusEvent(e: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) {\n    return;\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    currentModality = 'virtual';\n    triggerChangeHandlers('virtual', e);\n  }\n\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = false;\n}\n\nfunction handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = true;\n}\n\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\nfunction setupGlobalFocusEvents() {\n  if (typeof window === 'undefined' || hasSetupGlobalListeners) {\n    return;\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  let focus = HTMLElement.prototype.focus;\n  HTMLElement.prototype.focus = function () {\n    hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n\n  document.addEventListener('keydown', handleKeyboardEvent, true);\n  document.addEventListener('keyup', handleKeyboardEvent, true);\n  document.addEventListener('click', handleClickEvent, true);\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener('focus', handleFocusEvent, true);\n  window.addEventListener('blur', handleWindowBlur, false);\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerdown', handlePointerEvent, true);\n    document.addEventListener('pointermove', handlePointerEvent, true);\n    document.addEventListener('pointerup', handlePointerEvent, true);\n  } else {\n    document.addEventListener('mousedown', handlePointerEvent, true);\n    document.addEventListener('mousemove', handlePointerEvent, true);\n    document.addEventListener('mouseup', handlePointerEvent, true);\n  }\n\n  hasSetupGlobalListeners = true;\n}\n\nif (typeof document !== 'undefined') {\n  if (document.readyState !== 'loading') {\n    setupGlobalFocusEvents();\n  } else {\n    document.addEventListener('DOMContentLoaded', setupGlobalFocusEvents);\n  }\n}\n\n/**\n * If true, keyboard focus is visible.\n */\nexport function isFocusVisible(): boolean {\n  return currentModality !== 'pointer';\n}\n\nexport function getInteractionModality(): Modality {\n  return currentModality;\n}\n\nexport function setInteractionModality(modality: Modality) {\n  currentModality = modality;\n  triggerChangeHandlers(modality, null);\n}\n\n/**\n * Keeps state of the current modality.\n */\nexport function useInteractionModality(): Modality {\n  setupGlobalFocusEvents();\n\n  let [modality, setModality] = useState(currentModality);\n  useEffect(() => {\n    let handler = () => {\n      setModality(currentModality);\n    };\n\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  }, []);\n\n  return modality;\n}\n\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */\nfunction isKeyboardFocusEvent(isTextInput: boolean, modality: Modality, e: HandlerEvent) {\n  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\n\n/**\n * Manages focus visible state for the page, and subscribes individual components for updates.\n */\nexport function useFocusVisible(props: FocusVisibleProps = {}): FocusVisibleResult {\n  let {isTextInput, autoFocus} = props;\n  let [isFocusVisibleState, setFocusVisible] = useState(autoFocus || isFocusVisible());\n  useFocusVisibleListener((isFocusVisible) => {\n    setFocusVisible(isFocusVisible);\n  }, [isTextInput], {isTextInput});\n\n  return {isFocusVisible: isFocusVisibleState};\n}\n\n/**\n * Listens for trigger change and reports if focus is visible (i.e., modality is not pointer).\n */\nexport function useFocusVisibleListener(fn: FocusVisibleHandler, deps: ReadonlyArray<any>, opts?: {isTextInput?: boolean}): void {\n  setupGlobalFocusEvents();\n\n  useEffect(() => {\n    let handler = (modality: Modality, e: HandlerEvent) => {\n      if (!isKeyboardFocusEvent(opts?.isTextInput, modality, e)) {\n        return;\n      }\n      fn(isFocusVisible());\n    };\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  }, deps);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {FocusEvent, HTMLAttributes, useRef} from 'react';\nimport {useSyntheticBlurEvent} from './utils';\n\ninterface FocusWithinProps {\n  /** Whether the focus within events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when the target element or a descendant receives focus. */\n  onFocusWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the target element and all descendants lose focus. */\n  onBlurWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the the focus within state changes. */\n  onFocusWithinChange?: (isFocusWithin: boolean) => void\n}\n\ninterface FocusWithinResult {\n  /** Props to spread onto the target element. */\n  focusWithinProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles focus events for the target and its descendants.\n */\nexport function useFocusWithin(props: FocusWithinProps): FocusWithinResult {\n  let state = useRef({\n    isFocusWithin: false\n  }).current;\n\n  let onBlur = props.isDisabled ? null : (e: FocusEvent) => {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.isFocusWithin && !(e.currentTarget as Element).contains(e.relatedTarget as Element)) {\n      state.isFocusWithin = false;\n\n      if (props.onBlurWithin) {\n        props.onBlurWithin(e);\n      }\n\n      if (props.onFocusWithinChange) {\n        props.onFocusWithinChange(false);\n      }\n    }\n  };\n\n  let onSyntheticFocus = useSyntheticBlurEvent(onBlur);\n  let onFocus = props.isDisabled ? null : (e: FocusEvent) => {\n    if (!state.isFocusWithin) {\n      if (props.onFocusWithin) {\n        props.onFocusWithin(e);\n      }\n\n      if (props.onFocusWithinChange) {\n        props.onFocusWithinChange(true);\n      }\n\n      state.isFocusWithin = true;\n      onSyntheticFocus(e);\n    }\n  };\n\n  return {\n    focusWithinProps: {\n      onFocus,\n      onBlur\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {HoverEvents} from '@react-types/shared';\nimport {HTMLAttributes, useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface HoverProps extends HoverEvents {\n  /** Whether the hover events should be disabled. */\n  isDisabled?: boolean\n}\n\ninterface HoverResult {\n  /** Props to spread on the target element. */\n  hoverProps: HTMLAttributes<HTMLElement>,\n  isHovered: boolean\n}\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet globalIgnoreEmulatedMouseEvents = false;\nlet hoverCount = 0;\n\nfunction setGlobalIgnoreEmulatedMouseEvents() {\n  globalIgnoreEmulatedMouseEvents = true;\n\n  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n  setTimeout(() => {\n    globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\n\nfunction handleGlobalPointerEvent(e) {\n  if (e.pointerType === 'touch') {\n    setGlobalIgnoreEmulatedMouseEvents();\n  }\n}\n\nfunction setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerup', handleGlobalPointerEvent);\n  } else {\n    document.addEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n  }\n\n  hoverCount++;\n  return () => {\n    hoverCount--;\n    if (hoverCount > 0) {\n      return;\n    }\n\n    if (typeof PointerEvent !== 'undefined') {\n      document.removeEventListener('pointerup', handleGlobalPointerEvent);\n    } else {\n      document.removeEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n    }\n  };\n}\n\n/**\n * Handles pointer hover interactions for an element. Normalizes behavior\n * across browsers and platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useHover(props: HoverProps): HoverResult {\n  let {\n    onHoverStart,\n    onHoverChange,\n    onHoverEnd,\n    isDisabled\n  } = props;\n\n  let [isHovered, setHovered] = useState(false);\n  let state = useRef({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: '',\n    target: null\n  }).current;\n\n  useEffect(setupGlobalTouchEvents, []);\n\n  let {hoverProps, triggerHoverEnd} = useMemo(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) {\n        return;\n      }\n\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n\n      if (onHoverStart) {\n        onHoverStart({\n          type: 'hoverstart',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(true);\n      }\n\n      setHovered(true);\n    };\n\n    let triggerHoverEnd = (event, pointerType) => {\n      state.pointerType = '';\n      state.target = null;\n\n      if (pointerType === 'touch' || !state.isHovered) {\n        return;\n      }\n\n      state.isHovered = false;\n      let target = event.currentTarget;\n      if (onHoverEnd) {\n        onHoverEnd({\n          type: 'hoverend',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(false);\n      }\n\n      setHovered(false);\n    };\n\n    let hoverProps: HTMLAttributes<HTMLElement> = {};\n\n    if (typeof PointerEvent !== 'undefined') {\n      hoverProps.onPointerEnter = (e) => {\n        if (globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') {\n          return;\n        }\n\n        triggerHoverStart(e, e.pointerType);\n      };\n\n      hoverProps.onPointerLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as HTMLElement)) {\n          triggerHoverEnd(e, e.pointerType);\n        }\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n\n      hoverProps.onMouseEnter = (e) => {\n        if (!state.ignoreEmulatedMouseEvents && !globalIgnoreEmulatedMouseEvents) {\n          triggerHoverStart(e, 'mouse');\n        }\n\n        state.ignoreEmulatedMouseEvents = false;\n      };\n\n      hoverProps.onMouseLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as HTMLElement)) {\n          triggerHoverEnd(e, 'mouse');\n        }\n      };\n    }\n    return {hoverProps, triggerHoverEnd};\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n\n  useEffect(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) {\n      triggerHoverEnd({currentTarget: state.target}, state.pointerType);\n    }\n  }, [isDisabled]);\n\n  return {\n    hoverProps,\n    isHovered\n  };\n}\n\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {RefObject, SyntheticEvent, useEffect, useRef} from 'react';\n\ninterface InteractOutsideProps {\n  ref: RefObject<Element>,\n  onInteractOutside?: (e: SyntheticEvent) => void,\n  onInteractOutsideStart?: (e: SyntheticEvent) => void,\n  /** Whether the interact outside events should be disabled. */\n  isDisabled?: boolean\n}\n\n/**\n * Example, used in components like Dialogs and Popovers so they can close\n * when a user clicks outside them.\n */\nexport function useInteractOutside(props: InteractOutsideProps) {\n  let {ref, onInteractOutside, isDisabled, onInteractOutsideStart} = props;\n  let stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n    onInteractOutside,\n    onInteractOutsideStart\n  });\n  let state = stateRef.current;\n  state.onInteractOutside = onInteractOutside;\n  state.onInteractOutsideStart = onInteractOutsideStart;\n\n  useEffect(() => {\n    if (isDisabled) {\n      return;\n    }\n\n    let onPointerDown = (e) => {\n      if (isValidEvent(e, ref) && state.onInteractOutside) {\n        if (state.onInteractOutsideStart) {\n          state.onInteractOutsideStart(e);\n        }\n        state.isPointerDown = true;\n      }\n    };\n\n    // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n    if (typeof PointerEvent !== 'undefined') {\n      let onPointerUp = (e) => {\n        if (state.isPointerDown && state.onInteractOutside && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      // changing these to capture phase fixed combobox\n      document.addEventListener('pointerdown', onPointerDown, true);\n      document.addEventListener('pointerup', onPointerUp, true);\n\n      return () => {\n        document.removeEventListener('pointerdown', onPointerDown, true);\n        document.removeEventListener('pointerup', onPointerUp, true);\n      };\n    } else {\n      let onMouseUp = (e) => {\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n        } else if (state.isPointerDown && state.onInteractOutside && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      let onTouchEnd = (e) => {\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.onInteractOutside && state.isPointerDown && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      document.addEventListener('mousedown', onPointerDown, true);\n      document.addEventListener('mouseup', onMouseUp, true);\n      document.addEventListener('touchstart', onPointerDown, true);\n      document.addEventListener('touchend', onTouchEnd, true);\n\n      return () => {\n        document.removeEventListener('mousedown', onPointerDown, true);\n        document.removeEventListener('mouseup', onMouseUp, true);\n        document.removeEventListener('touchstart', onPointerDown, true);\n        document.removeEventListener('touchend', onTouchEnd, true);\n      };\n    }\n  }, [ref, state, isDisabled]);\n}\n\nfunction isValidEvent(event, ref) {\n  if (event.button > 0) {\n    return false;\n  }\n\n  // if the event target is no longer in the document\n  if (event.target) {\n    const ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) {\n      return false;\n    }\n  }\n\n  return ref.current && !ref.current.contains(event.target);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BaseEvent} from '@react-types/shared';\nimport {SyntheticEvent} from 'react';\n\n/**\n * This function wraps a React event handler to make stopPropagation the default, and support continuePropagation instead.\n */\nexport function createEventHandler<T extends SyntheticEvent>(handler: (e: BaseEvent<T>) => void): (e: T) => void {\n  if (!handler) {\n    return;\n  }\n\n  let shouldStopPropagation = true;\n  return (e: T) => {\n    let event: BaseEvent<T> = {\n      ...e,\n      preventDefault() {\n        e.preventDefault();\n      },\n      isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n      stopPropagation() {\n        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n      },\n      continuePropagation() {\n        shouldStopPropagation = false;\n      }\n    };\n\n    handler(event);\n\n    if (shouldStopPropagation) {\n      e.stopPropagation();\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {createEventHandler} from './createEventHandler';\nimport {HTMLAttributes} from 'react';\nimport {KeyboardEvents} from '@react-types/shared';\n\nexport interface KeyboardProps extends KeyboardEvents {\n  /** Whether the keyboard events should be disabled. */\n  isDisabled?: boolean\n}\n\ninterface KeyboardResult {\n  /** Props to spread onto the target element. */\n  keyboardProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles keyboard interactions for a focusable element.\n */\nexport function useKeyboard(props: KeyboardProps): KeyboardResult {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: createEventHandler(props.onKeyDown),\n      onKeyUp: createEventHandler(props.onKeyUp)\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {disableTextSelection, restoreTextSelection}  from './textSelection';\nimport {MoveEvents, PointerType} from '@react-types/shared';\nimport React, {HTMLAttributes, useMemo, useRef} from 'react';\nimport {useGlobalListeners} from '@react-aria/utils';\n\ninterface MoveResult {\n  /** Props to spread on the target element. */\n  moveProps: HTMLAttributes<HTMLElement>\n}\n\ninterface EventBase {\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\n/**\n * Handles move interactions across mouse, touch, and keyboard, including dragging with\n * the mouse or touch, and using the arrow keys. Normalizes behavior across browsers and\n * platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useMove(props: MoveEvents): MoveResult {\n  let {onMoveStart, onMove, onMoveEnd} = props;\n\n  let state = useRef<{\n    didMove: boolean,\n    lastPosition: {pageX: number, pageY: number} | null,\n    id: number | null\n  }>({didMove: false, lastPosition: null, id: null});\n\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let moveProps = useMemo(() => {\n    let moveProps: HTMLAttributes<HTMLElement> = {};\n\n    let start = () => {\n      disableTextSelection();\n      state.current.didMove = false;\n    };\n    let move = (originalEvent: EventBase, pointerType: PointerType, deltaX: number, deltaY: number) => {\n      if (deltaX === 0 && deltaY === 0) {\n        return;\n      }\n\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart?.({\n          type: 'movestart',\n          pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n      onMove({\n        type: 'move',\n        pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    let end = (originalEvent: EventBase, pointerType: PointerType) => {\n      restoreTextSelection();\n      if (state.current.didMove) {\n        onMoveEnd?.({\n          type: 'moveend',\n          pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    if (typeof PointerEvent === 'undefined') {\n      let onMouseMove = (e: MouseEvent) => {\n        if (e.button === 0) {\n          move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n      let onMouseUp = (e: MouseEvent) => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = (e: React.MouseEvent) => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          let {pageX, pageY} = e.changedTouches[touch];\n          move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX, pageY};\n        }\n      };\n      let onTouchEnd = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = (e: React.TouchEvent) => {\n        if (e.changedTouches.length === 0 || state.current.id != null) {\n          return;\n        }\n\n        let {pageX, pageY, identifier} = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {pageX, pageY};\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n\n          // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n\n      moveProps.onPointerDown = (e: React.PointerEvent) => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n\n    let triggerKeyboardMove = (e: EventBase, deltaX: number, deltaY: number) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n\n    moveProps.onKeyDown = (e) => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);\n\n  return {moveProps};\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RefObject, useCallback} from 'react';\nimport {ScrollEvents} from '@react-types/shared';\nimport {useEvent} from '@react-aria/utils';\n\nexport interface ScrollWheelProps extends ScrollEvents {\n  /** Whether the scroll listener should be disabled. */\n  isDisabled?: boolean\n}\n\n// scroll wheel needs to be added not passively so it's cancelable, small helper hook to remember that\nexport function useScrollWheel(props: ScrollWheelProps, ref: RefObject<HTMLElement>): void {\n  let {onScroll, isDisabled} = props;\n  let onScrollHandler = useCallback((e) => {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) {\n      return;\n    }\n\n    // stop scrolling the page\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (onScroll) {\n      onScroll({deltaX: e.deltaX, deltaY: e.deltaY});\n    }\n  }, [onScroll]);\n\n  useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, useRef} from 'react';\nimport {LongPressEvent} from '@react-types/shared';\nimport {mergeProps, useDescription, useGlobalListeners} from '@react-aria/utils';\nimport {usePress} from './usePress';\n\ninterface LongPressProps {\n  /** Whether long press events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when a long press interaction starts. */\n  onLongPressStart?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when a long press interaction ends, either\n   * over the target or when the pointer leaves the target.\n   */\n  onLongPressEnd?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when the threshold time is met while\n   * the press is over the target.\n   */\n  onLongPress?: (e: LongPressEvent) => void,\n  /**\n   * The amount of time in milliseconds to wait before triggering a long press.\n   * @default 500ms\n   */\n  threshold?: number,\n  /**\n   * A description for assistive techology users indicating that a long press\n   * action is available, e.g. \"Long press to open menu\".\n   */\n  accessibilityDescription?: string\n}\n\ninterface LongPressResult {\n  /** Props to spread on the target element. */\n  longPressProps: HTMLAttributes<HTMLElement>\n}\n\nconst DEFAULT_THRESHOLD = 500;\n\n/**\n * Handles long press interactions across mouse and touch devices. Supports a customizable time threshold,\n * accessibility description, and normalizes behavior across browsers and devices.\n */\nexport function useLongPress(props: LongPressProps): LongPressResult {\n  let {\n    isDisabled,\n    onLongPressStart,\n    onLongPressEnd,\n    onLongPress,\n    threshold = DEFAULT_THRESHOLD,\n    accessibilityDescription\n  } = props;\n\n  const timeRef = useRef(null);\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let {pressProps} = usePress({\n    isDisabled,\n    onPressStart(e) {\n      if (e.pointerType === 'mouse' || e.pointerType === 'touch') {\n        if (onLongPressStart) {\n          onLongPressStart({\n            ...e,\n            type: 'longpressstart'\n          });\n        }\n\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e.target.dispatchEvent(new PointerEvent('pointercancel', {bubbles: true}));\n          if (onLongPress) {\n            onLongPress({\n              ...e,\n              type: 'longpress'\n            });\n          }\n          timeRef.current = null;\n        }, threshold);\n\n        // Prevent context menu, which may be opened on long press on touch devices\n        if (e.pointerType === 'touch') {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n\n          addGlobalListener(e.target, 'contextmenu', onContextMenu, {once: true});\n          addGlobalListener(window, 'pointerup', () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e.target, 'contextmenu', onContextMenu);\n            }, 30);\n          }, {once: true});\n        }\n      }\n    },\n    onPressEnd(e) {\n      if (timeRef.current) {\n        clearTimeout(timeRef.current);\n      }\n\n      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) {\n        onLongPressEnd({\n          ...e,\n          type: 'longpressend'\n        });\n      }\n    }\n  });\n\n  let descriptionProps = useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);\n\n  return {\n    longPressProps: mergeProps(pressProps, descriptionProps)\n  };\n}\n"]},"metadata":{},"sourceType":"module"}